{"remainingRequest":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\vue\\Orion-Stress-Tester-Client\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\src\\App.vue","mtime":1581918294438},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580976810633},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\babel-loader\\lib\\index.js","mtime":1580976845122},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580976810633},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\index.js","mtime":1580976838260}],"contextDependencies":[],"result":["import \"core-js/modules/es6.date.to-iso-string\";\nimport \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.date.now\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**http请求类型*/\nvar REQUEST_TYPE_HTTP = 'HTTP';\n/**WebSocket请求类型*/\n\nvar REQUEST_TYPE_WEB_SOCKET = 'WebSocket';\n/**TCP请求类型*/\n\nvar REQUEST_TYPE_TCP = 'TCP';\n/**证书类型,默认证书*/\n\nvar REQUEST_CERT_DEFAULT = 'DEFAULT';\n/**证书类型pem*/\n\nvar REQUEST_CERT_PEM = 'PEM';\n/**证书类型PFX*/\n\nvar REQUEST_CERT_PFX = 'PFX';\n/**证书类型JKS*/\n\nvar REQUEST_CERT_JKS = 'JKS';\n/**普通日志*/\n\nvar LOG_INFO = 'INFO';\n/**成功日志*/\n\nvar LOG_SUCCESS = 'SUCCESS';\n/**异常日志*/\n\nvar LOG_ERROR = 'ERROR';\n/** 取消操作 */\n\nvar WS_COMMAND_CANCEL = -1;\n/** 提交测试*/\n\nvar WS_COMMAND_SUBMIT_TEST = 1;\n/** 开始的前测试,成功data=1,失败data=0 */\n\nvar WS_COMMAND_BEFORE_REQUEST_TEST = 2;\n/** 测试数据响应 */\n\nvar WS_COMMAND_TEST_RESPONSE = 3;\n/** 日志输出 */\n\nvar WS_COMMAND_TEST_LOG_RESPONSE = 4;\n/** 任务已完成 */\n\nvar WS_COMMAND_TEST_COMPLETE = 99;\n/** 缺少请求参数或存在无效的请求参数 */\n\nvar WS_COMMAND_INVALID_PARAMETER = 412;\n/** 失败响应 */\n\nvar WS_COMMAND_ERROR = 500;\n/** 失败响应 */\n\nvar WS_COMMAND_JVM_METRIC = 1000;\nexport default {\n  name: 'Orion-Stress-Tester',\n  data: function data() {\n    return {\n      // 是否显示请求统计信息\n      isStatistics: false,\n      //请求统计的信息\n      statisticsInfo: '',\n      //是否正在执行中\n      isExecuting: false,\n      //是否已经执行过\n      isExecuted: false,\n      //请求设置\n      requestConfig: {\n        //是否打印响应内容\n        printResInfo: true,\n        //测试机与URL服务器保持连接\n        keepAlive: true,\n        //最大建立连接数\n        poolSize: null,\n        //连接(请求)超时\n        timeout: null\n      },\n      //请求的数据\n      requestData: {\n        //请求的类型\n        requestType: REQUEST_TYPE_HTTP,\n        //WebSocket的版本\n        webSocketVersion: 'V13',\n        //WebSocket子协议\n        subProtocols: [],\n        //SNI 服务器名称\n        serverName: '',\n        //是否使用SSL\n        isSSL: false,\n        //证书的类型\n        cert: 'DEFAULT',\n        //证书的key\n        certKey: null,\n        //证书的value\n        certValue: null,\n        //主机地址,TCP时有效\n        host: '',\n        //端口号,TCP时有效\n        port: null,\n        //http请求的类型\n        method: 'GET',\n        //请求的header数据\n        headers: [],\n        //请求的url\n        url: '',\n        //请求的body\n        body: null,\n        //请求的总次数\n        count: null,\n        //每次请求多数次\n        average: null,\n        //请求的间隔\n        interval: null\n      },\n      //请求数据长度\n      requestDataLen: 0,\n      //请求响应数据长度\n      responseDataLen: 0,\n      //请求成功的数量\n      responseSucceeded: 0,\n      //请求失败的数量\n      responseFailed: 0,\n      //请求统计信息\n      // code=状态码\n      // count=请求次数\n      // total=总用时;\n      // max=最大用时;\n      // mean=平均用时;\n      responseTimeCount: [],\n      //服务器性能\n      //processors 处理器数量\n      //totalMemory 可用内存\n      //maxMemory 最大内存\n      //freeMemory 剩余内存\n      serverMetrics: {\n        processors: 0,\n        totalMemory: 0,\n        maxMemory: 0,\n        freeMemory: 0\n      },\n      //连接服务器的WebSocket\n      websocket: null\n    };\n  },\n  methods: {\n    /**\r\n     * 是否显示请求数量统计信息\r\n     */\n    isShowStatistics: function isShowStatistics() {\n      if (this.requestData.count > 0 && this.requestData.average > 0 && this.requestData.interval > 0) {\n        this.isStatistics = true;\n        this.statisticsInfo = this.$t('statisticsInfo').replace('{interval}', this.requestData.interval).replace('{average}', this.requestData.average).replace('{count}', this.requestData.count).replace('{conn}', this.requestConfig.poolSize == null ? this.requestData.count : this.requestConfig.poolSize).replace('{sum}', this.requestData.count * this.requestData.average);\n      } else {\n        this.isStatistics = false;\n      }\n    },\n\n    /**\r\n     * 删除SubProtocols\r\n     * @param {Object} item\r\n     */\n    removeSubProtocols: function removeSubProtocols(item) {\n      var _this = this;\n\n      this.$confirm('确认关闭？').then(function (res) {\n        var index = _this.requestData.subProtocols.indexOf(item);\n\n        if (index !== -1) {\n          _this.requestData.subProtocols.splice(index, 1);\n        }\n      }).catch(function (err) {});\n    },\n\n    /**\r\n     * 添加SubProtocols\r\n     */\n    addSubProtocols: function addSubProtocols() {\n      this.requestData.subProtocols.push({\n        value: '',\n        key: Date.now()\n      });\n    },\n\n    /**\r\n     * 删除header\r\n     * @param {Object} item\r\n     */\n    removeHeader: function removeHeader(item) {\n      var _this2 = this;\n\n      this.$confirm('确认关闭？').then(function (res) {\n        var index = _this2.requestData.headers.indexOf(item);\n\n        if (index !== -1) {\n          _this2.requestData.headers.splice(index, 1);\n        }\n      }).catch(function (err) {});\n    },\n\n    /**\r\n     * 添加header\r\n     */\n    addHeader: function addHeader() {\n      this.requestData.headers.push({\n        key: '',\n        value: ''\n      });\n    },\n\n    /**\r\n     * 加载证书的key\r\n     */\n    loadCertKey: function loadCertKey() {\n      var reader = new FileReader();\n      var file = this.$refs.readCertKey.files[0];\n      reader.readAsText(file);\n      var tis = this;\n\n      reader.onload = function (res) {\n        try {\n          tis.requestData.certKey = res.target.result;\n        } catch (err) {\n          console.log(err);\n        }\n      };\n    },\n\n    /**\r\n     * 加载证书的value\r\n     */\n    loadCertValue: function loadCertValue() {\n      var reader = new FileReader();\n      var file = this.$refs.readCertValue.files[0];\n      reader.readAsText(file);\n      var tis = this;\n\n      reader.onload = function (res) {\n        try {\n          tis.requestData.certValue = res.target.result;\n        } catch (err) {\n          console.log(err);\n        }\n      };\n    },\n\n    /**\r\n     * 清楚数据为默认数据\r\n     */\n    clearToDefaultData: function clearToDefaultData() {\n      //请求数据长度\n      this.requestDataLen = 0; //请求响应数据长度\n\n      this.responseDataLen = 0; //请求成功的数量\n\n      this.responseSucceeded = 0; //请求失败的数量\n\n      this.responseFailed = 0; //请求统计信息\n\n      this.responseTimeCount = [];\n    },\n\n    /**\r\n     * 截取小数点并四舍五入\r\n     * @param {Double} num\r\n     * @param {int} len\r\n     */\n    toFixed: function toFixed(num, len) {\n      var index = num.toString().indexOf('.');\n\n      if (index != -1) {\n        if (num.toString().substring(index).length > len) {\n          return num.toFixed(len);\n        } else {\n          return num;\n        }\n      } else {\n        return num;\n      }\n    },\n\n    /**\r\n     * 执行请求\r\n     */\n    execute: function execute() {\n      var _this3 = this;\n\n      this.$refs.requestTable.validate(function (valid) {\n        if (valid) {\n          _this3.isExecuting = true; //修改是否在执行状态,执行中\n\n          _this3.isExecuted = true; //标记前端控制台状态为已执行\n\n          var connectMsg = _this3.$t('consoleConnecting');\n\n          _this3.consolePrintInfo(LOG_INFO, connectMsg); //连接WebSocket并在open后请求数据\n\n\n          var wshost = process.env.VUE_APP_BASE_API;\n\n          if (wshost == null || wshost == 'wlhost') {\n            wshost = window.location.host;\n          }\n\n          _this3.websocket = new WebSocket('ws://' + wshost + '/ws/ost');\n\n          _this3.websocket.onopen = function () {\n            var connected = _this3.$t('consoleConnected');\n\n            _this3.consolePrintInfo(LOG_SUCCESS, connected);\n\n            var trData = _this3.requestData; //初始化默认数据\n\n            _this3.clearToDefaultData(); //加载请求数据\n\n\n            var reqData = {\n              type: trData.requestType,\n              url: trData.url.trim(),\n              count: trData.count,\n              average: trData.average,\n              interval: trData.interval\n            };\n\n            if (trData.isSSL) {\n              reqData.isSSL = true;\n\n              if (trData.cert == REQUEST_CERT_DEFAULT) {\n                reqData.cert = REQUEST_CERT_DEFAULT;\n              } else if (trData.certKey != null && trData.certKey.trim() != '' && trData.certValue != null && trData.certValue.trim() != '') {\n                reqData.cert = trData.cert;\n                reqData.certKey = trData.certKey.trim();\n                reqData.certValue = trData.certValue.trim();\n              }\n            }\n\n            if (trData.requestType == REQUEST_TYPE_WEB_SOCKET) {\n              reqData.webSocketVersion = trData.webSocketVersion;\n\n              if (trData.subProtocols.length > 0) {\n                var subPs = [];\n\n                for (var i = 0; i < trData.subProtocols.length; i++) {\n                  var v = trData.subProtocols[i].value;\n\n                  if (v != null && v.trim() != '') {\n                    subPs.push(v.trim());\n                  }\n                }\n\n                if (subPs.length > 0) {\n                  reqData.subProtocols = subPs;\n                }\n              }\n            }\n\n            if (trData.requestType == REQUEST_TYPE_TCP) {\n              reqData.host = trData.host.trim();\n\n              if (trData.port == '' || trData < 0 || trData > 65535 || isNaN(parseInt(trData.port))) {\n                reqData.port = trData.isSSL ? 443 : 80;\n              } else {\n                reqData.port = parseInt(trData.port);\n              }\n\n              if (trData.serverName != null && trData.serverName.trim() != '') {\n                reqData.serverName = trData.serverName.trim();\n              }\n            }\n\n            if (trData.requestType == REQUEST_TYPE_HTTP) {\n              reqData.method = trData.method;\n            }\n\n            if (trData.headers != null && trData.headers.length != 0 && trData.requestType != REQUEST_TYPE_TCP) {\n              var headers = [];\n\n              for (var i = 0; i < trData.headers.length; i++) {\n                var h = trData.headers[i];\n\n                if (h.key.trim() != '' && h.value.trim() != '') {\n                  headers.push(h.trim());\n                }\n              }\n\n              if (headers.length > 0) {\n                reqData.headers = headers;\n              }\n            }\n\n            if (trData.body != null && trData.body.trim() != '') {\n              reqData.body = trData.body.trim();\n            }\n\n            reqData.keepAlive = _this3.requestConfig.keepAlive;\n\n            if (reqData.keepAlive) {\n              var vu = _this3.requestConfig.poolSize;\n\n              if (vu == null || vu == 0 || vu == '' || isNaN(parseInt(vu))) {\n                vu = trData.count;\n              }\n\n              reqData.poolSize = parseInt(vu);\n            }\n\n            if (_this3.requestConfig.timeout != null && _this3.requestConfig.timeout > 0) {\n              reqData.timeout = parseInt(_this3.requestConfig.timeout);\n            }\n\n            reqData.printResInfo = _this3.requestConfig.printResInfo;\n            console.log(reqData);\n            var body = {\n              code: WS_COMMAND_SUBMIT_TEST,\n              data: reqData\n            };\n\n            _this3.websocket.send(JSON.stringify(body));\n          };\n\n          _this3.websocket.onerror = function (err) {\n            console.log('Connection error:');\n            console.log(err);\n            _this3.isExecuting = false; //修改是否在执行状态,执行结束\n\n            _this3.consolePrintInfo(LOG_ERROR, _this3.$t('consoleConnectFailed'));\n          }; //关闭事件\n\n\n          _this3.websocket.onclose = function () {\n            _this3.isExecuting = false; //修改是否在执行状态,执行结束\n\n            console.log(_this3.$t('consoleClosed'));\n          }; //响应事件\n\n\n          _this3.websocket.onmessage = function (res) {\n            //这里处理后台返回的结果\n            var data = JSON.parse(res.data); // console.log(data);\n\n            if (data.code == WS_COMMAND_INVALID_PARAMETER) {\n              //缺少参数或取消参数的响应\n              _this3.consolePrintInfo(LOG_ERROR, _this3.$t('commandInvalidParameter') + data.msg);\n\n              _this3.websocket.close();\n            } else if (data.code == WS_COMMAND_BEFORE_REQUEST_TEST) {\n              //提交测试前的测试响应\n              if (data.data == 1) {\n                _this3.consolePrintInfo(LOG_SUCCESS, _this3.$t('commandBeforeRequestTestSucceeded'));\n              } else {\n                _this3.consolePrintInfo(LOG_ERROR, _this3.$t('commandBeforeRequestTestFailed') + data.msg);\n\n                _this3.websocket.close();\n              }\n            } else if (data.code == WS_COMMAND_JVM_METRIC) {\n              var rd = data.data;\n              _this3.serverMetrics.processors = rd.processors;\n              _this3.serverMetrics.totalMemory = _this3.toFixed(rd.totalMemory / 1048576, 5);\n              _this3.serverMetrics.maxMemory = _this3.toFixed(rd.maxMemory / 1048576, 5);\n              _this3.serverMetrics.freeMemory = _this3.toFixed(rd.freeMemory / 1048576, 5);\n            } else if (data.code == WS_COMMAND_TEST_LOG_RESPONSE) {\n              //请求日志响应\n              var resData = data.data;\n              var state = resData.state == 1 ? _this3.$t('succee') : _this3.$t('fail');\n\n              var msg = _this3.$t('commandTestResponseCount').replace('{count}', resData.count);\n\n              if (resData.index != 0) {\n                msg += ', ' + _this3.$t('commandTestResponseIndex').replace('{index}', resData.index);\n              }\n\n              msg += ', ' + _this3.$t('commandTestResponseState').replace('{state}', state);\n              msg += ', ' + _this3.$t('commandTestResponseCode').replace('{code}', resData.code);\n\n              if (resData.body != null) {\n                msg += ', ' + _this3.$t('commandTestResponseBody').replace('{body}', resData.body);\n              }\n\n              if (_this3.requestConfig.printResInfo) {\n                _this3.consolePrintInfo(LOG_INFO, msg);\n              }\n            } else if (data.code == WS_COMMAND_TEST_RESPONSE) {\n              //测试统计信息响应\n              var resData = data.data; //获取http/ws响应长度数据统计\n\n              var vhcbr = resData['vertx.http.client.bytesReceived'];\n\n              if (vhcbr == null) {\n                //获取tcp的响应数据长度\n                vhcbr = resData['vertx.net.client.bytesReceived'];\n              }\n\n              if (vhcbr != null && vhcbr.length > 0) {\n                var total = 0;\n\n                for (var i = 0; i < vhcbr.length; i++) {\n                  total += vhcbr[i].total;\n                }\n\n                _this3.responseDataLen = total;\n              } //获取http/ws发送数据长度统计\n\n\n              var vhcbs = resData['vertx.http.client.bytesSent'];\n\n              if (vhcbs == null) {\n                //获取tcp发送数据长度统计\n                vhcbs = resData['vertx.net.client.bytesSent'];\n              }\n\n              if (vhcbs != null && vhcbs.length > 0) {\n                var total = 0;\n\n                for (var i = 0; i < vhcbs.length; i++) {\n                  total += vhcbs[i].total;\n                }\n\n                _this3.requestDataLen = total;\n              } //获取http/ws响应统计\n\n\n              var vhcrt = resData['vertx.http.client.responseTime'];\n\n              if (vhcrt != null && vhcrt.length > 0) {\n                _this3.responseTimeCount = [];\n\n                for (var i = 0; i < vhcrt.length; i++) {\n                  var obj = vhcrt[i];\n                  var timeCount = {};\n                  timeCount.code = obj.tags.code;\n                  timeCount.count = obj.count;\n                  timeCount.total = _this3.toFixed(obj.totalTimeMs, 5);\n                  timeCount.max = _this3.toFixed(obj.maxMs, 5);\n                  timeCount.mean = _this3.toFixed(obj.meanMs, 5);\n\n                  _this3.responseTimeCount.push(timeCount);\n                }\n              } //获取已成功处理数量\n\n\n              _this3.responseSucceeded = resData.succeeded; //获取处理已失败数量\n\n              _this3.responseFailed = resData.failed;\n            } else if (data.code == WS_COMMAND_TEST_COMPLETE) {\n              _this3.consolePrintInfo(LOG_SUCCESS, _this3.$t('commandTestComplete'));\n            }\n          };\n\n          _this3.$nextTick(function () {\n            document.documentElement.scrollTop = document.body.scrollHeight;\n          });\n        }\n      });\n    },\n\n    /**\r\n     * 取消执行\r\n     */\n    executeCancel: function executeCancel() {\n      this.isExecuting = false;\n\n      if (this.websocket != null) {\n        this.websocket.close();\n      }\n    },\n    consolePrintInfo: function consolePrintInfo(log, msg) {\n      var _this4 = this;\n\n      var time = new Date().toISOString().replace('T', ' ').replace('Z', '');\n      var el = document.createElement('div');\n\n      if (log == 'SUCCESS') {\n        el.style.color = '#28a745';\n      } else if (log == 'ERROR') {\n        el.style.color = '#dc3545';\n      }\n\n      var logEl = document.createElement('p');\n      logEl.style.marginBottom = '0';\n      logEl.innerText = '[ ' + log + ' ] ' + time;\n      el.appendChild(logEl);\n      var msgEl = document.createElement('p');\n      msgEl.style.marginTop = '3px';\n      msgEl.innerText = msg;\n      el.appendChild(msgEl);\n      document.getElementById('response-body').appendChild(el);\n      this.$nextTick(function () {\n        _this4.$refs.responseConsoleBody.scrollTop = _this4.$refs.responseConsoleBody.scrollHeight;\n      });\n    }\n  },\n  watch: {\n    'requestData.url': function requestDataUrl(val) {\n      if (val.indexOf('https://') != -1 && this.requestData.requestType == REQUEST_TYPE_HTTP) {\n        this.requestData.isSSL = true;\n      } else if (val.indexOf('wss://') != -1 && this.requestData.requestType == REQUEST_TYPE_WEB_SOCKET) {\n        this.requestData.isSSL = true;\n      } else if (this.requestData.requestType != 'TCP') {\n        this.requestData.isSSL = false;\n      }\n    },\n    'requestData.requestType': function requestDataRequestType() {\n      if (this.requestData.url.indexOf('https://') != -1 && this.requestData.requestType == REQUEST_TYPE_HTTP) {\n        this.requestData.isSSL = true;\n      } else if (this.requestData.url.indexOf('wss://') != -1 && this.requestData.requestType == REQUEST_TYPE_WEB_SOCKET) {\n        this.requestData.isSSL = true;\n      } else if (this.requestData.requestType != REQUEST_TYPE_TCP) {\n        this.requestData.isSSL = false;\n      }\n    },\n    'requestData.count': function requestDataCount() {\n      if (this.requestData.count >= 10 && this.requestData.average > 1000 || this.requestData.average > 10000) {\n        this.requestConfig.printResInfo = false;\n      } else {\n        this.requestConfig.printResInfo = true;\n      }\n\n      this.isShowStatistics();\n    },\n    'requestData.average': function requestDataAverage() {\n      if (this.requestData.count >= 10 && this.requestData.average > 1000 || this.requestData.average > 10000) {\n        this.requestConfig.printResInfo = false;\n      } else {\n        this.requestConfig.printResInfo = true;\n      }\n\n      this.isShowStatistics();\n    },\n    'requestData.interval': function requestDataInterval() {\n      this.isShowStatistics();\n    },\n    'requestConfig.poolSize': function requestConfigPoolSize() {\n      this.isShowStatistics();\n    }\n  },\n  computed: {\n    watchResponseHeaderColor: function watchResponseHeaderColor() {\n      // 获取响应状态\n      if (this.responseSucceeded > this.responseFailed) {\n        return 'background-color:#e8f6f0;';\n      } else if (this.responseSucceeded < this.responseFailed) {\n        return 'background-color:#fae7e7;';\n      } else {\n        return '';\n      }\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<el-container id=\"app\">\r\n\t\t<!-- 手机导航栏 -->\r\n\t\t<div id=\"mobile-bar\">\r\n\t\t\t<img src=\"./assets/logo.png\" alt=\"\" class=\"menu-button\" />\r\n\t\t\t<div class=\"logo\"><a href=\"/\">Orion-Stress-Tester</a></div>\r\n\t\t</div>\r\n\t\t<!-- 电脑导航栏 -->\r\n\t\t<el-header id=\"pc-bar\">\r\n\t\t\t<a id=\"logo\" href=\"/\">\r\n\t\t\t\t<img src=\"./assets/logo.png\" alt=\"\" />\r\n\t\t\t\t<span>Orion-Stress-Tester</span>\r\n\t\t\t</a>\r\n\t\t</el-header>\r\n\r\n\t\t<el-container>\r\n\t\t\t<!-- 中心栏 -->\r\n\t\t\t<el-main id=\"main\">\r\n\t\t\t\t<el-form :model=\"requestData\" label-width=\"120px\" label-position=\"right\" ref=\"requestTable\">\r\n\t\t\t\t\t<!-- 请求类型选择 -->\r\n\t\t\t\t\t<el-form-item :label=\"$t('requestType')\">\r\n\t\t\t\t\t\t<el-radio-group v-model=\"requestData.requestType\" :placeholder=\"$t('select')\">\r\n\t\t\t\t\t\t\t<el-radio label=\"HTTP\">HTTP/S</el-radio>\r\n\t\t\t\t\t\t\t<el-radio label=\"WebSocket\">WebSocket/S</el-radio>\r\n\t\t\t\t\t\t\t<el-radio label=\"TCP\">TCP/S</el-radio>\r\n\t\t\t\t\t\t</el-radio-group>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- HTTP相关 -->\r\n\t\t\t\t\t<el-form-item\r\n\t\t\t\t\t\tv-if=\"requestData.requestType == 'HTTP'\"\r\n\t\t\t\t\t\t:label=\"$t('requestUrl')\"\r\n\t\t\t\t\t\tprop=\"url\"\r\n\t\t\t\t\t\t:rules=\"[{ required: true, message: $t('requestTips') }, { pattern: /^(http|https):\\/\\/.+$/, message: $t('httpUrlInvalidTips') }]\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<el-input :placeholder=\"$t('httpUrlPlaceholder')\" v-model=\"requestData.url\">\r\n\t\t\t\t\t\t\t<el-select v-model=\"requestData.method\" slot=\"prepend\" placeholder=\"请选择\" style=\"width: 6rem;color: #222;\">\r\n\t\t\t\t\t\t\t\t<el-option value=\"GET\">GET</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"POST\">POST</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"OPTIONS\">OPTIONS</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"HEAD\">HEAD</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"PUT\">PUT</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"DELETE\">DELETE</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"TRACE\">TRACE</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"CONNECT\">CONNECT</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"PATCH\">PATCH</el-option>\r\n\t\t\t\t\t\t\t\t<el-option value=\"OTHER\">OTHER</el-option>\r\n\t\t\t\t\t\t\t</el-select>\r\n\t\t\t\t\t\t</el-input>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- WebSocket相关 -->\r\n\t\t\t\t\t<el-form-item\r\n\t\t\t\t\t\tv-if=\"requestData.requestType == 'WebSocket'\"\r\n\t\t\t\t\t\t:label=\"$t('requestUrl')\"\r\n\t\t\t\t\t\tprop=\"url\"\r\n\t\t\t\t\t\t:rules=\"[{ required: true, message: $t('requestTips') }, { pattern: /^(ws|wss):\\/\\/.+$/, message: $t('websocketUrlInvalidTips') }]\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<el-input :placeholder=\"$t('websocketUrlPlaceholder')\" v-model=\"requestData.url\"></el-input>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- TCP相关 -->\r\n\t\t\t\t\t<el-form-item v-if=\"requestData.requestType == 'TCP'\" :label=\"$t('requestUrl')\" required>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"2\">\r\n\t\t\t\t\t\t\t<el-form-item><el-checkbox v-model=\"requestData.isSSL\">SSL</el-checkbox></el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"14\">\r\n\t\t\t\t\t\t\t<el-form-item prop=\"host\" :rules=\"[{ required: true, message: $t('tcpHostTips') }]\">\r\n\t\t\t\t\t\t\t\t<el-input :placeholder=\"$t('tcpHostPlaceholder')\" v-model=\"requestData.host\"></el-input>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :xs=\"0\" :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"7\">\r\n\t\t\t\t\t\t\t<el-form-item><el-input type=\"number\" min=\"0\" max=\"65535\" :placeholder=\"$t('tcpPortPlaceholder')\" v-model=\"requestData.port\"></el-input></el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- 证书选择 -->\r\n\t\t\t\t\t<el-form-item :label=\"$t('certSetting')\" v-if=\"requestData.isSSL\">\r\n\t\t\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t\t\t<el-radio-group v-model=\"requestData.cert\">\r\n\t\t\t\t\t\t\t\t<el-radio label=\"DEFAULT\">{{ $t('certDefault') }}</el-radio>\r\n\t\t\t\t\t\t\t\t<el-radio label=\"PEM\">{{ $t('certPem') }}</el-radio>\r\n\t\t\t\t\t\t\t\t<el-radio label=\"PFX\">{{ $t('certPfx') }}</el-radio>\r\n\t\t\t\t\t\t\t\t<el-radio label=\"JKS\">{{ $t('certJks') }}</el-radio>\r\n\t\t\t\t\t\t\t</el-radio-group>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :span=\"24\" v-if=\"requestData.cert == 'PEM' || requestData.cert == 'PFX' || requestData.cert == 'JKS'\">\r\n\t\t\t\t\t\t\t<el-input type=\"textarea\" :placeholder=\"$t('certKey')\" v-model=\"requestData.certKey\"></el-input>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :span=\"24\" v-if=\"requestData.cert == 'PEM' || requestData.cert == 'PFX' || requestData.cert == 'JKS'\">\r\n\t\t\t\t\t\t\t<el-input type=\"textarea\" :placeholder=\"$t('certValue')\" v-model=\"requestData.certValue\"></el-input>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col v-if=\"requestData.cert == 'PEM' || requestData.cert == 'PFX' || requestData.cert == 'JKS'\">\r\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" style=\"margin-right: 5px;\" @click=\"$refs.readCertKey.click()\">{{ $t('btnReadCertKey') }}</el-button>\r\n\t\t\t\t\t\t\t<input type=\"file\" style=\"display: none\" accept=\".pem,.key,.p12,.jks,.txt\" ref=\"readCertKey\" @change=\"loadCertKey\" />\r\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"$refs.readCertValue.click()\">{{ $t('btnReadCertValue') }}</el-button>\r\n\t\t\t\t\t\t\t<input type=\"file\" style=\"display: none\" accept=\".pem,.key,.p12,.jks,.txt\" ref=\"readCertValue\" @change=\"loadCertValue\" />\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- WebSocket的版本 -->\r\n\t\t\t\t\t<el-form-item label=\"WebSocketVersion\" v-if=\"requestData.requestType == 'WebSocket'\">\r\n\t\t\t\t\t\t<el-select v-model=\"requestData.webSocketVersion\" placeholder=\"请选择\" style=\"width: 100%;\">\r\n\t\t\t\t\t\t\t<el-option value=\"V00\">V00</el-option>\r\n\t\t\t\t\t\t\t<el-option value=\"V07\">V07</el-option>\r\n\t\t\t\t\t\t\t<el-option value=\"V08\">V08</el-option>\r\n\t\t\t\t\t\t\t<el-option value=\"V13\">V13</el-option>\r\n\t\t\t\t\t\t</el-select>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!--  WebSocket的SubProtocols -->\r\n\t\t\t\t\t<el-form-item label=\"SubProtocols\" v-if=\"requestData.requestType == 'WebSocket'\">\r\n\t\t\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t\t\t<el-form-item v-for=\"(item, index) in requestData.subProtocols\" :key=\"item.key\">\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"20\" :sm=\"21\"><el-input v-model=\"item.value\" :placeholder=\"$t('inputValue')\"></el-input></el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"1\" :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"3\" :sm=\"2\">\r\n\t\t\t\t\t\t\t\t\t<el-button @click.prevent=\"removeSubProtocols(item)\" size=\"small\" type=\"danger\">{{ $t('btnRemove') }}</el-button>\r\n\t\t\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"addSubProtocols\">{{ $t('btnAdd') }}</el-button>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- 请求的Header内容 -->\r\n\t\t\t\t\t<el-form-item :label=\"$t('requestHeaders')\" v-if=\"requestData.requestType == 'HTTP' || requestData.requestType == 'WebSocket'\">\r\n\t\t\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t\t\t<el-form-item v-for=\"(item, index) in requestData.headers\" :key=\"index\">\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"10\"><el-input v-model=\"item.key\" :placeholder=\"$t('inputName')\"></el-input></el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"0\" :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"20\" :sm=\"10\"><el-input v-model=\"item.value\" :placeholder=\"$t('inputValue')\"></el-input></el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"1\" :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t\t\t<el-col :xs=\"3\" :sm=\"2\">\r\n\t\t\t\t\t\t\t\t\t<el-button @click.prevent=\"removeHeader(item)\" size=\"small\" type=\"danger\">{{ $t('btnRemove') }}</el-button>\r\n\t\t\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"addHeader\">{{ $t('btnAdd') }}</el-button>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- 请求的SNI server name内容 -->\r\n\t\t\t\t\t<el-form-item label=\"ServerName(SNI)\" v-if=\"requestData.requestType == 'TCP'\">\r\n\t\t\t\t\t\t<el-input :placeholder=\"$t('requestServerNamePlaceholder')\" v-model=\"requestData.serverName\"></el-input>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<!-- 请求的body内容 -->\r\n\t\t\t\t\t<el-form-item :label=\"$t('requestBody')\"><el-input type=\"textarea\" :placeholder=\"$t('requestBodyPlaceholder')\" v-model=\"requestData.body\"></el-input></el-form-item>\r\n\t\t\t\t\t<!-- 请求统计信息 -->\r\n\t\t\t\t\t<el-form-item :label=\"$t('requestCount')\" required>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"6\">\r\n\t\t\t\t\t\t\t<el-form-item prop=\"count\" :rules=\"[{ required: true, type: 'number', min: 0, message: $t('requestCountTips') }]\" required>\r\n\t\t\t\t\t\t\t\t<el-input\r\n\t\t\t\t\t\t\t\t\t:placeholder=\"requestData.requestType == 'HTTP' ? $t('requestCountPlaceholder') : $t('requestTcpCountPlaceholder')\"\r\n\t\t\t\t\t\t\t\t\tv-model.number=\"requestData.count\"\r\n\t\t\t\t\t\t\t\t></el-input>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"8\">\r\n\t\t\t\t\t\t\t<el-form-item prop=\"average\" :rules=\"[{ required: true, type: 'number', min: 0, message: $t('requestAverageTips') }]\" required>\r\n\t\t\t\t\t\t\t\t<el-input\r\n\t\t\t\t\t\t\t\t\t:placeholder=\"requestData.requestType == 'HTTP' ? $t('requestAveragePlaceholder') : $t('requestTcpAveragePlaceholder')\"\r\n\t\t\t\t\t\t\t\t\tv-model.number=\"requestData.average\"\r\n\t\t\t\t\t\t\t\t></el-input>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t\t<el-col :sm=\"1\">&nbsp;</el-col>\r\n\t\t\t\t\t\t<el-col :xs=\"24\" :sm=\"8\">\r\n\t\t\t\t\t\t\t<el-form-item prop=\"interval\" :rules=\"[{ required: true, type: 'number', min: 1, message: $t('requestIntervalTips') }]\" required>\r\n\t\t\t\t\t\t\t\t<el-input\r\n\t\t\t\t\t\t\t\t\t:placeholder=\"requestData.requestType == 'HTTP' ? $t('requestIntervalPlaceholder') : $t('requestTcpIntervalPlaceholder')\"\r\n\t\t\t\t\t\t\t\t\tv-model.number=\"requestData.interval\"\r\n\t\t\t\t\t\t\t\t></el-input>\r\n\t\t\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t\t</el-col>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<el-form-item v-show=\"isStatistics\">{{ statisticsInfo }}</el-form-item>\r\n\t\t\t\t\t<el-form-item>\r\n\t\t\t\t\t\t<div style=\"display: flex;flex-wrap: wrap;\">\r\n\t\t\t\t\t\t\t<div style=\"margin-right: 0.6rem\">\r\n\t\t\t\t\t\t\t\t<el-tooltip class=\"item\" effect=\"dark\" :content=\"$t('requestConfigPrintInfoTips')\" placement=\"top\">\r\n\t\t\t\t\t\t\t\t\t<el-checkbox v-model=\"requestConfig.printResInfo\" :label=\"$t('requestConfigPrintInfo')\"></el-checkbox>\r\n\t\t\t\t\t\t\t\t</el-tooltip>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div style=\"margin-right: 0.6rem;\"><el-input :placeholder=\"$t('requestConfigTimeout')\" type=\"number\" v-model.number=\"requestConfig.timeout\"></el-input></div>\r\n\t\t\t\t\t\t\t<div style=\"margin-right: 0.6rem;\"><el-checkbox v-model=\"requestConfig.keepAlive\" :label=\"$t('requestConfigKeepAlive')\"></el-checkbox></div>\r\n\t\t\t\t\t\t\t<div style=\"flex: 1;\" v-show=\"requestConfig.keepAlive\">\r\n\t\t\t\t\t\t\t\t<el-input :placeholder=\"$t('requestConfigPoolSize')\" type=\"number\" v-model.number=\"requestConfig.poolSize\"></el-input>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t\t<el-form-item>\r\n\t\t\t\t\t\t<el-button type=\"primary\" :loading=\"isExecuting\" @click=\"execute\">{{ isExecuting ? $t('btnIsExecute') : $t('btnExecute') }}</el-button>\r\n\t\t\t\t\t\t<el-button v-show=\"isExecuting\" @click=\"executeCancel\">{{ $t('btnCancel') }}</el-button>\r\n\t\t\t\t\t</el-form-item>\r\n\t\t\t\t</el-form>\r\n\t\t\t\t<div v-show=\"isExecuted\">\r\n\t\t\t\t\t<div id=\"response-heander\" :style=\"watchResponseHeaderColor\">\r\n\t\t\t\t\t\t<!-- 请求进度 -->\r\n\t\t\t\t\t\t<div class=\"response-header-box\" v-show=\"responseSucceeded != 0 || responseFailed != 0\">\r\n\t\t\t\t\t\t\t<div class=\"response-header-label\">\r\n\t\t\t\t\t\t\t\t<b>{{ $t('executeProgress') }}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"response-header-body\">\r\n\t\t\t\t\t\t\t\t<div style=\"line-height: 34px;\" class=\"sm-margin-left-0x\">{{ $t('succee') }}:&nbsp;</div>\r\n\t\t\t\t\t\t\t\t<div style=\"color: #28a745;font-size: 36px;\">{{ responseSucceeded }}</div>\r\n\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('fail') }}:&nbsp;</div>\r\n\t\t\t\t\t\t\t\t<div style=\"color: #dc3545;font-size: 36px;\">{{ responseFailed }}</div>\r\n\t\t\t\t\t\t\t\t<div class=\"small\">\r\n\t\t\t\t\t\t\t\t\t&nbsp;{{ responseSucceeded + responseFailed }} / {{ requestData.requestType == 'HTTP' ? requestData.count * requestData.average : requestData.count }}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- 请求统计信息-->\r\n\t\t\t\t\t\t<div class=\"response-header-box\" v-show=\"responseTimeCount.length > 0\">\r\n\t\t\t\t\t\t\t<div class=\"response-header-label\" style=\"align-items: flex-start;\">\r\n\t\t\t\t\t\t\t\t<b style=\"line-height: 34px;\">{{ $t('responseTimesCount') }}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"response-header-body\" style=\"flex-direction: column;align-items: flex-start;\">\r\n\t\t\t\t\t\t\t\t<div style=\"display: flex;flex-wrap: wrap;\" v-for=\"(item, index) in responseTimeCount\" :key=\"index\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"small sm-margin-left-0x\">{{ $t('responseCode') }}:{{ item.code }}</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('responseCount') }}:{{ item.count }}</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('responseTotalTime') }}:{{ item.total }}ms</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('responseMaxTime') }}:{{ item.max }}ms</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('responseMeanTime') }}:{{ item.mean }}ms</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- 数据信息 -->\r\n\t\t\t\t\t\t<div class=\"response-header-box\" v-show=\"requestDataLen != 0 || responseDataLen != 0\">\r\n\t\t\t\t\t\t\t<div class=\"response-header-label\">\r\n\t\t\t\t\t\t\t\t<b>{{ $t('dataLenInfo') }}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"response-header-body\">\r\n\t\t\t\t\t\t\t\t<div style=\"display: flex;flex-wrap: wrap;\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"small sm-margin-left-0x\">{{ $t('requestDataLen') }}:{{ requestDataLen }} byte</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('responseDataLen') }}:{{ responseDataLen }} byte</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- 服务器指标 -->\r\n\t\t\t\t\t\t<div class=\"response-header-box\" v-show=\"serverMetrics != null && serverMetrics.processors != 0\">\r\n\t\t\t\t\t\t\t<div class=\"response-header-label\">\r\n\t\t\t\t\t\t\t\t<b>{{ $t('serverMemory') }}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"response-header-body\">\r\n\t\t\t\t\t\t\t\t<div style=\"display: flex;flex-wrap: wrap;\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"small sm-margin-left-0x\">{{ $t('serverProcessors') }}:{{ serverMetrics.processors }}</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('serverMaxMemory') }}:{{ serverMetrics.maxMemory }} m</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('serverTotalMemory') }}:{{ serverMetrics.totalMemory }} m</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"small\">{{ $t('serverFreeMemory') }}:{{ serverMetrics.freeMemory }} m</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id=\"response-body\" ref=\"responseConsoleBody\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</el-main>\r\n\t\t</el-container>\r\n\t</el-container>\r\n</template>\r\n\r\n<script>\r\n/**http请求类型*/\r\nconst REQUEST_TYPE_HTTP = 'HTTP';\r\n/**WebSocket请求类型*/\r\nconst REQUEST_TYPE_WEB_SOCKET = 'WebSocket';\r\n/**TCP请求类型*/\r\nconst REQUEST_TYPE_TCP = 'TCP';\r\n/**证书类型,默认证书*/\r\nconst REQUEST_CERT_DEFAULT = 'DEFAULT';\r\n/**证书类型pem*/\r\nconst REQUEST_CERT_PEM = 'PEM';\r\n/**证书类型PFX*/\r\nconst REQUEST_CERT_PFX = 'PFX';\r\n/**证书类型JKS*/\r\nconst REQUEST_CERT_JKS = 'JKS';\r\n\r\n/**普通日志*/\r\nconst LOG_INFO = 'INFO';\r\n/**成功日志*/\r\nconst LOG_SUCCESS = 'SUCCESS';\r\n/**异常日志*/\r\nconst LOG_ERROR = 'ERROR';\r\n\r\n/** 取消操作 */\r\nconst WS_COMMAND_CANCEL = -1;\r\n/** 提交测试*/\r\nconst WS_COMMAND_SUBMIT_TEST = 1;\r\n/** 开始的前测试,成功data=1,失败data=0 */\r\nconst WS_COMMAND_BEFORE_REQUEST_TEST = 2;\r\n/** 测试数据响应 */\r\nconst WS_COMMAND_TEST_RESPONSE = 3;\r\n/** 日志输出 */\r\nconst WS_COMMAND_TEST_LOG_RESPONSE = 4;\r\n/** 任务已完成 */\r\nconst WS_COMMAND_TEST_COMPLETE = 99;\r\n/** 缺少请求参数或存在无效的请求参数 */\r\nconst WS_COMMAND_INVALID_PARAMETER = 412;\r\n/** 失败响应 */\r\nconst WS_COMMAND_ERROR = 500;\r\n/** 失败响应 */\r\nconst WS_COMMAND_JVM_METRIC = 1000;\r\n\r\nexport default {\r\n\tname: 'Orion-Stress-Tester',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\t// 是否显示请求统计信息\r\n\t\t\tisStatistics: false,\r\n\t\t\t//请求统计的信息\r\n\t\t\tstatisticsInfo: '',\r\n\t\t\t//是否正在执行中\r\n\t\t\tisExecuting: false,\r\n\t\t\t//是否已经执行过\r\n\t\t\tisExecuted: false,\r\n\t\t\t//请求设置\r\n\t\t\trequestConfig: {\r\n\t\t\t\t//是否打印响应内容\r\n\t\t\t\tprintResInfo: true,\r\n\t\t\t\t//测试机与URL服务器保持连接\r\n\t\t\t\tkeepAlive: true,\r\n\t\t\t\t//最大建立连接数\r\n\t\t\t\tpoolSize: null,\r\n\t\t\t\t//连接(请求)超时\r\n\t\t\t\ttimeout: null\r\n\t\t\t},\r\n\t\t\t//请求的数据\r\n\t\t\trequestData: {\r\n\t\t\t\t//请求的类型\r\n\t\t\t\trequestType: REQUEST_TYPE_HTTP,\r\n\t\t\t\t//WebSocket的版本\r\n\t\t\t\twebSocketVersion: 'V13',\r\n\t\t\t\t//WebSocket子协议\r\n\t\t\t\tsubProtocols: [],\r\n\t\t\t\t//SNI 服务器名称\r\n\t\t\t\tserverName: '',\r\n\t\t\t\t//是否使用SSL\r\n\t\t\t\tisSSL: false,\r\n\t\t\t\t//证书的类型\r\n\t\t\t\tcert: 'DEFAULT',\r\n\t\t\t\t//证书的key\r\n\t\t\t\tcertKey: null,\r\n\t\t\t\t//证书的value\r\n\t\t\t\tcertValue: null,\r\n\t\t\t\t//主机地址,TCP时有效\r\n\t\t\t\thost: '',\r\n\t\t\t\t//端口号,TCP时有效\r\n\t\t\t\tport: null,\r\n\t\t\t\t//http请求的类型\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\t//请求的header数据\r\n\t\t\t\theaders: [],\r\n\t\t\t\t//请求的url\r\n\t\t\t\turl: '',\r\n\t\t\t\t//请求的body\r\n\t\t\t\tbody: null,\r\n\t\t\t\t//请求的总次数\r\n\t\t\t\tcount: null,\r\n\t\t\t\t//每次请求多数次\r\n\t\t\t\taverage: null,\r\n\t\t\t\t//请求的间隔\r\n\t\t\t\tinterval: null\r\n\t\t\t},\r\n\t\t\t//请求数据长度\r\n\t\t\trequestDataLen: 0,\r\n\t\t\t//请求响应数据长度\r\n\t\t\tresponseDataLen: 0,\r\n\t\t\t//请求成功的数量\r\n\t\t\tresponseSucceeded: 0,\r\n\t\t\t//请求失败的数量\r\n\t\t\tresponseFailed: 0,\r\n\t\t\t//请求统计信息\r\n\t\t\t// code=状态码\r\n\t\t\t// count=请求次数\r\n\t\t\t// total=总用时;\r\n\t\t\t// max=最大用时;\r\n\t\t\t// mean=平均用时;\r\n\t\t\tresponseTimeCount: [],\r\n\t\t\t//服务器性能\r\n\t\t\t//processors 处理器数量\r\n\t\t\t//totalMemory 可用内存\r\n\t\t\t//maxMemory 最大内存\r\n\t\t\t//freeMemory 剩余内存\r\n\t\t\tserverMetrics: {\r\n\t\t\t\tprocessors: 0,\r\n\t\t\t\ttotalMemory: 0,\r\n\t\t\t\tmaxMemory: 0,\r\n\t\t\t\tfreeMemory: 0\r\n\t\t\t},\r\n\t\t\t//连接服务器的WebSocket\r\n\t\t\twebsocket: null\r\n\t\t};\r\n\t},\r\n\tmethods: {\r\n\t\t/**\r\n\t\t * 是否显示请求数量统计信息\r\n\t\t */\r\n\t\tisShowStatistics() {\r\n\t\t\tif (this.requestData.count > 0 && this.requestData.average > 0 && this.requestData.interval > 0) {\r\n\t\t\t\tthis.isStatistics = true;\r\n\t\t\t\tthis.statisticsInfo = this.$t('statisticsInfo')\r\n\t\t\t\t\t.replace('{interval}', this.requestData.interval)\r\n\t\t\t\t\t.replace('{average}', this.requestData.average)\r\n\t\t\t\t\t.replace('{count}', this.requestData.count)\r\n\t\t\t\t\t.replace('{conn}', this.requestConfig.poolSize == null ? this.requestData.count : this.requestConfig.poolSize)\r\n\t\t\t\t\t.replace('{sum}', this.requestData.count * this.requestData.average);\r\n\t\t\t} else {\r\n\t\t\t\tthis.isStatistics = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * 删除SubProtocols\r\n\t\t * @param {Object} item\r\n\t\t */\r\n\t\tremoveSubProtocols(item) {\r\n\t\t\tthis.$confirm('确认关闭？')\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tvar index = this.requestData.subProtocols.indexOf(item);\r\n\t\t\t\t\tif (index !== -1) {\r\n\t\t\t\t\t\tthis.requestData.subProtocols.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {});\r\n\t\t},\r\n\t\t/**\r\n\t\t * 添加SubProtocols\r\n\t\t */\r\n\t\taddSubProtocols() {\r\n\t\t\tthis.requestData.subProtocols.push({\r\n\t\t\t\tvalue: '',\r\n\t\t\t\tkey: Date.now()\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * 删除header\r\n\t\t * @param {Object} item\r\n\t\t */\r\n\t\tremoveHeader(item) {\r\n\t\t\tthis.$confirm('确认关闭？')\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tvar index = this.requestData.headers.indexOf(item);\r\n\t\t\t\t\tif (index !== -1) {\r\n\t\t\t\t\t\tthis.requestData.headers.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {});\r\n\t\t},\r\n\t\t/**\r\n\t\t * 添加header\r\n\t\t */\r\n\t\taddHeader() {\r\n\t\t\tthis.requestData.headers.push({\r\n\t\t\t\tkey: '',\r\n\t\t\t\tvalue: ''\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * 加载证书的key\r\n\t\t */\r\n\t\tloadCertKey() {\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\tvar file = this.$refs.readCertKey.files[0];\r\n\t\t\treader.readAsText(file);\r\n\t\t\tvar tis = this;\r\n\t\t\treader.onload = function(res) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttis.requestData.certKey = res.target.result;\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\t/**\r\n\t\t * 加载证书的value\r\n\t\t */\r\n\t\tloadCertValue() {\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\tvar file = this.$refs.readCertValue.files[0];\r\n\t\t\treader.readAsText(file);\r\n\t\t\tvar tis = this;\r\n\t\t\treader.onload = function(res) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttis.requestData.certValue = res.target.result;\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\t/**\r\n\t\t * 清楚数据为默认数据\r\n\t\t */\r\n\t\tclearToDefaultData() {\r\n\t\t\t//请求数据长度\r\n\t\t\tthis.requestDataLen = 0;\r\n\t\t\t//请求响应数据长度\r\n\t\t\tthis.responseDataLen = 0;\r\n\t\t\t//请求成功的数量\r\n\t\t\tthis.responseSucceeded = 0;\r\n\t\t\t//请求失败的数量\r\n\t\t\tthis.responseFailed = 0;\r\n\t\t\t//请求统计信息\r\n\t\t\tthis.responseTimeCount = [];\r\n\t\t},\r\n\t\t/**\r\n\t\t * 截取小数点并四舍五入\r\n\t\t * @param {Double} num\r\n\t\t * @param {int} len\r\n\t\t */\r\n\t\ttoFixed(num, len) {\r\n\t\t\tvar index = num.toString().indexOf('.');\r\n\t\t\tif (index != -1) {\r\n\t\t\t\tif (num.toString().substring(index).length > len) {\r\n\t\t\t\t\treturn num.toFixed(len);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn num;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn num;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * 执行请求\r\n\t\t */\r\n\t\texecute() {\r\n\t\t\tthis.$refs.requestTable.validate(valid => {\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\tthis.isExecuting = true; //修改是否在执行状态,执行中\r\n\t\t\t\t\tthis.isExecuted = true; //标记前端控制台状态为已执行\r\n\t\t\t\t\tvar connectMsg = this.$t('consoleConnecting');\r\n\t\t\t\t\tthis.consolePrintInfo(LOG_INFO, connectMsg);\r\n\t\t\t\t\t//连接WebSocket并在open后请求数据\r\n\t\t\t\t\tvar wshost=process.env.VUE_APP_BASE_API;\r\n\t\t\t\t\tif(wshost==null || wshost=='wlhost'){\r\n\t\t\t\t\t\twshost=window.location.host;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.websocket = new WebSocket('ws://'+wshost+'/ws/ost');\r\n\t\t\t\t\tthis.websocket.onopen = () => {\r\n\t\t\t\t\t\tvar connected = this.$t('consoleConnected');\r\n\t\t\t\t\t\tthis.consolePrintInfo(LOG_SUCCESS, connected);\r\n\t\t\t\t\t\tvar trData = this.requestData;\r\n\t\t\t\t\t\t//初始化默认数据\r\n\t\t\t\t\t\tthis.clearToDefaultData();\r\n\r\n\t\t\t\t\t\t//加载请求数据\r\n\t\t\t\t\t\tvar reqData = {\r\n\t\t\t\t\t\t\ttype: trData.requestType,\r\n\t\t\t\t\t\t\turl: trData.url.trim(),\r\n\t\t\t\t\t\t\tcount: trData.count,\r\n\t\t\t\t\t\t\taverage: trData.average,\r\n\t\t\t\t\t\t\tinterval: trData.interval\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tif (trData.isSSL) {\r\n\t\t\t\t\t\t\treqData.isSSL = true;\r\n\t\t\t\t\t\t\tif (trData.cert == REQUEST_CERT_DEFAULT) {\r\n\t\t\t\t\t\t\t\treqData.cert = REQUEST_CERT_DEFAULT;\r\n\t\t\t\t\t\t\t} else if (trData.certKey != null && trData.certKey.trim() != '' && (trData.certValue != null && trData.certValue.trim() != '')) {\r\n\t\t\t\t\t\t\t\treqData.cert = trData.cert;\r\n\t\t\t\t\t\t\t\treqData.certKey = trData.certKey.trim();\r\n\t\t\t\t\t\t\t\treqData.certValue = trData.certValue.trim();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (trData.requestType == REQUEST_TYPE_WEB_SOCKET) {\r\n\t\t\t\t\t\t\treqData.webSocketVersion = trData.webSocketVersion;\r\n\t\t\t\t\t\t\tif (trData.subProtocols.length > 0) {\r\n\t\t\t\t\t\t\t\tvar subPs = [];\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < trData.subProtocols.length; i++) {\r\n\t\t\t\t\t\t\t\t\tvar v = trData.subProtocols[i].value;\r\n\t\t\t\t\t\t\t\t\tif (v != null && v.trim() != '') {\r\n\t\t\t\t\t\t\t\t\t\tsubPs.push(v.trim());\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (subPs.length > 0) {\r\n\t\t\t\t\t\t\t\t\treqData.subProtocols = subPs;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (trData.requestType == REQUEST_TYPE_TCP) {\r\n\t\t\t\t\t\t\treqData.host = trData.host.trim();\r\n\t\t\t\t\t\t\tif (trData.port == '' || trData < 0 || trData > 65535 || isNaN(parseInt(trData.port))) {\r\n\t\t\t\t\t\t\t\treqData.port = trData.isSSL ? 443 : 80;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treqData.port = parseInt(trData.port);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (trData.serverName != null && trData.serverName.trim() != '') {\r\n\t\t\t\t\t\t\t\treqData.serverName = trData.serverName.trim();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (trData.requestType == REQUEST_TYPE_HTTP) {\r\n\t\t\t\t\t\t\treqData.method = trData.method;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (trData.headers != null && trData.headers.length != 0 && trData.requestType != REQUEST_TYPE_TCP) {\r\n\t\t\t\t\t\t\tvar headers = [];\r\n\t\t\t\t\t\t\tfor (var i = 0; i < trData.headers.length; i++) {\r\n\t\t\t\t\t\t\t\tvar h = trData.headers[i];\r\n\t\t\t\t\t\t\t\tif (h.key.trim() != '' && h.value.trim() != '') {\r\n\t\t\t\t\t\t\t\t\theaders.push(h.trim());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (headers.length > 0) {\r\n\t\t\t\t\t\t\t\treqData.headers = headers;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (trData.body != null && trData.body.trim() != '') {\r\n\t\t\t\t\t\t\treqData.body = trData.body.trim();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treqData.keepAlive = this.requestConfig.keepAlive;\r\n\t\t\t\t\t\tif (reqData.keepAlive) {\r\n\t\t\t\t\t\t\tvar vu = this.requestConfig.poolSize;\r\n\t\t\t\t\t\t\tif (vu == null || vu == 0 || vu == '' || isNaN(parseInt(vu))) {\r\n\t\t\t\t\t\t\t\tvu = trData.count;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treqData.poolSize = parseInt(vu);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.requestConfig.timeout != null && this.requestConfig.timeout > 0) {\r\n\t\t\t\t\t\t\treqData.timeout = parseInt(this.requestConfig.timeout);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treqData.printResInfo = this.requestConfig.printResInfo;\r\n\t\t\t\t\t\tconsole.log(reqData);\r\n\t\t\t\t\t\tvar body = { code: WS_COMMAND_SUBMIT_TEST, data: reqData };\r\n\t\t\t\t\t\tthis.websocket.send(JSON.stringify(body));\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.websocket.onerror = err => {\r\n\t\t\t\t\t\tconsole.log('Connection error:');\r\n\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\tthis.isExecuting = false; //修改是否在执行状态,执行结束\r\n\t\t\t\t\t\tthis.consolePrintInfo(LOG_ERROR, this.$t('consoleConnectFailed'));\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//关闭事件\r\n\t\t\t\t\tthis.websocket.onclose = () => {\r\n\t\t\t\t\t\tthis.isExecuting = false; //修改是否在执行状态,执行结束\r\n\r\n\t\t\t\t\t\tconsole.log(this.$t('consoleClosed'));\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//响应事件\r\n\t\t\t\t\tthis.websocket.onmessage = res => {\r\n\t\t\t\t\t\t//这里处理后台返回的结果\r\n\t\t\t\t\t\tvar data = JSON.parse(res.data);\r\n\t\t\t\t\t\t// console.log(data);\r\n\t\t\t\t\t\tif (data.code == WS_COMMAND_INVALID_PARAMETER) {\r\n\t\t\t\t\t\t\t//缺少参数或取消参数的响应\r\n\t\t\t\t\t\t\tthis.consolePrintInfo(LOG_ERROR, this.$t('commandInvalidParameter') + data.msg);\r\n\t\t\t\t\t\t\tthis.websocket.close();\r\n\t\t\t\t\t\t} else if (data.code == WS_COMMAND_BEFORE_REQUEST_TEST) {\r\n\t\t\t\t\t\t\t//提交测试前的测试响应\r\n\t\t\t\t\t\t\tif (data.data == 1) {\r\n\t\t\t\t\t\t\t\tthis.consolePrintInfo(LOG_SUCCESS, this.$t('commandBeforeRequestTestSucceeded'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.consolePrintInfo(LOG_ERROR, this.$t('commandBeforeRequestTestFailed') + data.msg);\r\n\t\t\t\t\t\t\t\tthis.websocket.close();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (data.code == WS_COMMAND_JVM_METRIC) {\r\n\t\t\t\t\t\t\tvar rd = data.data;\r\n\t\t\t\t\t\t\tthis.serverMetrics.processors = rd.processors;\r\n\t\t\t\t\t\t\tthis.serverMetrics.totalMemory = this.toFixed(rd.totalMemory / 1048576, 5);\r\n\t\t\t\t\t\t\tthis.serverMetrics.maxMemory = this.toFixed(rd.maxMemory / 1048576, 5);\r\n\t\t\t\t\t\t\tthis.serverMetrics.freeMemory = this.toFixed(rd.freeMemory / 1048576, 5);\r\n\t\t\t\t\t\t} else if (data.code == WS_COMMAND_TEST_LOG_RESPONSE) {\r\n\t\t\t\t\t\t\t//请求日志响应\r\n\t\t\t\t\t\t\tvar resData = data.data;\r\n\t\t\t\t\t\t\tvar state = resData.state == 1 ? this.$t('succee') : this.$t('fail');\r\n\t\t\t\t\t\t\tvar msg = this.$t('commandTestResponseCount').replace('{count}', resData.count);\r\n\t\t\t\t\t\t\tif (resData.index != 0) {\r\n\t\t\t\t\t\t\t\tmsg += ', ' + this.$t('commandTestResponseIndex').replace('{index}', resData.index);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tmsg += ', ' + this.$t('commandTestResponseState').replace('{state}', state);\r\n\t\t\t\t\t\t\tmsg += ', ' + this.$t('commandTestResponseCode').replace('{code}', resData.code);\r\n\t\t\t\t\t\t\tif (resData.body != null) {\r\n\t\t\t\t\t\t\t\tmsg += ', ' + this.$t('commandTestResponseBody').replace('{body}', resData.body);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.requestConfig.printResInfo) {\r\n\t\t\t\t\t\t\t\tthis.consolePrintInfo(LOG_INFO, msg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (data.code == WS_COMMAND_TEST_RESPONSE) {\r\n\t\t\t\t\t\t\t//测试统计信息响应\r\n\t\t\t\t\t\t\tvar resData = data.data;\r\n\t\t\t\t\t\t\t//获取http/ws响应长度数据统计\r\n\t\t\t\t\t\t\tvar vhcbr = resData['vertx.http.client.bytesReceived'];\r\n\t\t\t\t\t\t\tif (vhcbr == null) {\r\n\t\t\t\t\t\t\t\t//获取tcp的响应数据长度\r\n\t\t\t\t\t\t\t\tvhcbr = resData['vertx.net.client.bytesReceived'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (vhcbr != null && vhcbr.length > 0) {\r\n\t\t\t\t\t\t\t\tvar total = 0;\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < vhcbr.length; i++) {\r\n\t\t\t\t\t\t\t\t\ttotal += vhcbr[i].total;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.responseDataLen = total;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//获取http/ws发送数据长度统计\r\n\t\t\t\t\t\t\tvar vhcbs = resData['vertx.http.client.bytesSent'];\r\n\t\t\t\t\t\t\tif (vhcbs == null) {\r\n\t\t\t\t\t\t\t\t//获取tcp发送数据长度统计\r\n\t\t\t\t\t\t\t\tvhcbs = resData['vertx.net.client.bytesSent'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (vhcbs != null && vhcbs.length > 0) {\r\n\t\t\t\t\t\t\t\tvar total = 0;\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < vhcbs.length; i++) {\r\n\t\t\t\t\t\t\t\t\ttotal += vhcbs[i].total;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.requestDataLen = total;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//获取http/ws响应统计\r\n\t\t\t\t\t\t\tvar vhcrt = resData['vertx.http.client.responseTime'];\r\n\t\t\t\t\t\t\tif (vhcrt != null && vhcrt.length > 0) {\r\n\t\t\t\t\t\t\t\tthis.responseTimeCount = [];\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < vhcrt.length; i++) {\r\n\t\t\t\t\t\t\t\t\tvar obj = vhcrt[i];\r\n\t\t\t\t\t\t\t\t\tvar timeCount = {};\r\n\t\t\t\t\t\t\t\t\ttimeCount.code = obj.tags.code;\r\n\t\t\t\t\t\t\t\t\ttimeCount.count = obj.count;\r\n\t\t\t\t\t\t\t\t\ttimeCount.total = this.toFixed(obj.totalTimeMs, 5);\r\n\t\t\t\t\t\t\t\t\ttimeCount.max = this.toFixed(obj.maxMs, 5);\r\n\t\t\t\t\t\t\t\t\ttimeCount.mean = this.toFixed(obj.meanMs, 5);\r\n\t\t\t\t\t\t\t\t\tthis.responseTimeCount.push(timeCount);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//获取已成功处理数量\r\n\t\t\t\t\t\t\tthis.responseSucceeded = resData.succeeded;\r\n\t\t\t\t\t\t\t//获取处理已失败数量\r\n\t\t\t\t\t\t\tthis.responseFailed = resData.failed;\r\n\t\t\t\t\t\t} else if (data.code == WS_COMMAND_TEST_COMPLETE) {\r\n\t\t\t\t\t\t\tthis.consolePrintInfo(LOG_SUCCESS, this.$t('commandTestComplete'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\t\tdocument.documentElement.scrollTop = document.body.scrollHeight;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * 取消执行\r\n\t\t */\r\n\t\texecuteCancel() {\r\n\t\t\tthis.isExecuting = false;\r\n\t\t\tif (this.websocket != null) {\r\n\t\t\t\tthis.websocket.close();\r\n\t\t\t}\r\n\t\t},\r\n\t\tconsolePrintInfo(log, msg) {\r\n\t\t\tvar time = new Date()\r\n\t\t\t\t.toISOString()\r\n\t\t\t\t.replace('T', ' ')\r\n\t\t\t\t.replace('Z', '');\r\n\t\t\tvar el = document.createElement('div');\r\n\t\t\tif (log == 'SUCCESS') {\r\n\t\t\t\tel.style.color = '#28a745';\r\n\t\t\t} else if (log == 'ERROR') {\r\n\t\t\t\tel.style.color = '#dc3545';\r\n\t\t\t}\r\n\t\t\tvar logEl = document.createElement('p');\r\n\t\t\tlogEl.style.marginBottom = '0';\r\n\t\t\tlogEl.innerText = '[ ' + log + ' ] ' + time;\r\n\t\t\tel.appendChild(logEl);\r\n\r\n\t\t\tvar msgEl = document.createElement('p');\r\n\t\t\tmsgEl.style.marginTop = '3px';\r\n\t\t\tmsgEl.innerText = msg;\r\n\t\t\tel.appendChild(msgEl);\r\n\t\t\tdocument.getElementById('response-body').appendChild(el);\r\n\t\t\tthis.$nextTick(() => {\r\n\t\t\t\tthis.$refs.responseConsoleBody.scrollTop = this.$refs.responseConsoleBody.scrollHeight;\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\t'requestData.url'(val) {\r\n\t\t\tif (val.indexOf('https://') != -1 && this.requestData.requestType == REQUEST_TYPE_HTTP) {\r\n\t\t\t\tthis.requestData.isSSL = true;\r\n\t\t\t} else if (val.indexOf('wss://') != -1 && this.requestData.requestType == REQUEST_TYPE_WEB_SOCKET) {\r\n\t\t\t\tthis.requestData.isSSL = true;\r\n\t\t\t} else if (this.requestData.requestType != 'TCP') {\r\n\t\t\t\tthis.requestData.isSSL = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t'requestData.requestType'() {\r\n\t\t\tif (this.requestData.url.indexOf('https://') != -1 && this.requestData.requestType == REQUEST_TYPE_HTTP) {\r\n\t\t\t\tthis.requestData.isSSL = true;\r\n\t\t\t} else if (this.requestData.url.indexOf('wss://') != -1 && this.requestData.requestType == REQUEST_TYPE_WEB_SOCKET) {\r\n\t\t\t\tthis.requestData.isSSL = true;\r\n\t\t\t} else if (this.requestData.requestType != REQUEST_TYPE_TCP) {\r\n\t\t\t\tthis.requestData.isSSL = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t'requestData.count'() {\r\n\t\t\tif ((this.requestData.count >= 10 && this.requestData.average > 1000) || this.requestData.average > 10000) {\r\n\t\t\t\tthis.requestConfig.printResInfo = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis.requestConfig.printResInfo = true;\r\n\t\t\t}\r\n\t\t\tthis.isShowStatistics();\r\n\t\t},\r\n\t\t'requestData.average'() {\r\n\t\t\tif ((this.requestData.count >= 10 && this.requestData.average > 1000) || this.requestData.average > 10000) {\r\n\t\t\t\tthis.requestConfig.printResInfo = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis.requestConfig.printResInfo = true;\r\n\t\t\t}\r\n\t\t\tthis.isShowStatistics();\r\n\t\t},\r\n\t\t'requestData.interval'() {\r\n\t\t\tthis.isShowStatistics();\r\n\t\t},\r\n\t\t'requestConfig.poolSize'() {\r\n\t\t\tthis.isShowStatistics();\r\n\t\t}\r\n\t},\r\n\tcomputed: {\r\n\t\twatchResponseHeaderColor() {\r\n\t\t\t// 获取响应状态\r\n\t\t\tif (this.responseSucceeded > this.responseFailed) {\r\n\t\t\t\treturn 'background-color:#e8f6f0;';\r\n\t\t\t} else if (this.responseSucceeded < this.responseFailed) {\r\n\t\t\t\treturn 'background-color:#fae7e7;';\r\n\t\t\t} else {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 修改框架样式 */\r\n.el-input__inner::placeholder {\r\n\tcolor: #333 !important;\r\n}\r\n\r\n.el-textarea__inner::placeholder {\r\n\tcolor: #333 !important;\r\n}\r\n\r\n/* 通用样式 */\r\na {\r\n\ttext-decoration: none;\r\n\tcolor: #304455;\r\n}\r\nimg {\r\n\tborder: none;\r\n}\r\n.sm-margin-left-0x {\r\n\tmargin-left: 0 !important;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n\t#mobile-bar {\r\n\t\tdisplay: block !important;\r\n\t}\r\n\t#pc-bar {\r\n\t\tdisplay: none !important;\r\n\t}\r\n\t#aside {\r\n\t\tpadding-top: 40px !important;\r\n\t\twidth: 100% !important;\r\n\t}\r\n\t#main {\r\n\t\tpadding-top: 60px !important;\r\n\t}\r\n\t#response-heander .response-header-label {\r\n\t\twidth: 100% !important;\r\n\t\ttext-align: left !important;\r\n\t\tjustify-content: left !important;\r\n\t}\r\n\t.sm-margin-left-0x {\r\n\t\tmargin-left: 0.6rem !important;\r\n\t}\r\n}\r\n\r\n/* 手机导航栏 */\r\n#mobile-bar {\r\n\tposition: fixed;\r\n\tdisplay: none;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 40px;\r\n\tbackground-color: #fff;\r\n\tz-index: 20;\r\n\tbox-shadow: 0 0 2px rgba(0, 0, 0, 0.25);\r\n}\r\n#mobile-bar .menu-button {\r\n\tposition: absolute;\r\n\ttop: 8px;\r\n\tleft: 12px;\r\n\theight: 25px;\r\n\twidth: 25px;\r\n\tz-index: 2;\r\n}\r\n\r\n#mobile-bar .logo {\r\n\tposition: absolute;\r\n\ttop: 10px;\r\n\ttext-align: center;\r\n\twidth: 100%;\r\n}\r\n\r\n/* 电脑导航栏 */\r\n#pc-bar {\r\n\tposition: fixed;\r\n\twidth: 100%;\r\n\ttop: 0;\r\n\twidth: 100%;\r\n\tbox-shadow: 0 0 1px rgba(0, 0, 0, 0.25);\r\n\ttransition: background-color 0.3s ease-in-out;\r\n\tbackground-color: #fff;\r\n\theight: 40px;\r\n\tpadding: 10px 60px;\r\n\tz-index: 10;\r\n}\r\n#logo {\r\n\tdisplay: inline-block;\r\n\tfont-size: 1.5em;\r\n\tline-height: 40px;\r\n\tcolor: #273849;\r\n\tfont-family: 'Dosis', 'Source Sans Pro', 'Helvetica Neue', Arial, sans-serif;\r\n\tfont-weight: 500;\r\n}\r\n#logo img {\r\n\tvertical-align: middle;\r\n\tmargin-right: 6px;\r\n\twidth: 40px;\r\n\theight: 40px;\r\n}\r\n\r\n/* #nav {\n\tposition: fixed;\n}\n#nav {\n\tlist-style-type: none;\n\tmargin: 0;\n\tpadding: 0;\n\tposition: absolute;\n\tright: 30px;\n\ttop: 10px;\n\theight: 40px;\n\tline-height: 40px;\n}\n#nav li {\n\tdisplay: inline-block;\n\tposition: relative;\n\tmargin: 0 0.6em;\n\tcursor: pointer;\n}\n#nav li a:hover {\n\tpadding-bottom: 2px;\n\tborder-bottom: 2px solid #42b983;\n}\n */\r\n\r\n#main {\r\n\tcolor: #333;\r\n\tpadding-top: 80px;\r\n\tmax-width: 1024px;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tmargin-bottom: 10px;\r\n\tscrollbar-width: thin;\r\n}\r\n\r\n#response-heander {\r\n\tbackground-color: #f5f7fa;\r\n\tborder-radius: 5px 5px 0 0;\r\n\tpadding: 10px 5px;\r\n}\r\n#response-heander .response-header-box {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n}\r\n#response-heander .response-header-label {\r\n\twidth: 105px;\r\n\tmargin-right: 10px;\r\n\tdisplay: flex;\r\n\ttext-align: right;\r\n\tjustify-content: right;\r\n\talign-items: center;\r\n}\r\n#response-heander .response-header-body {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: left;\r\n\talign-items: flex-end;\r\n}\r\n\r\n#response-heander .response-header-body .small {\r\n\tline-height: 34px;\r\n\tmargin-left: 0.6rem;\r\n}\r\n\r\n#response-charts-line {\r\n\tbackground-color: #f5f7fa;\r\n\tpadding-top: 10px;\r\n}\r\n\r\n#response-body {\r\n\tbackground-color: #18181a;\r\n\tcolor: white;\r\n\tpadding: 5px;\r\n\theight: 40vh;\r\n\tborder-radius: 0 0 5px 5px;\r\n\toverflow-y: auto;\r\n\tscrollbar-width: thin;\r\n}\r\n</style>\n"],"sourceRoot":"src"}]}