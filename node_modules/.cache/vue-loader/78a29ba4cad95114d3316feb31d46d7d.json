{"remainingRequest":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\vue\\Orion-Stress-Tester-Client\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\src\\App.vue","mtime":1581918294438},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580976810633},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1580976838333},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580976810633},{"path":"D:\\project\\vue\\Orion-Stress-Tester-Client\\node_modules\\vue-loader\\lib\\index.js","mtime":1580976838260}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"el-container\",\n    { attrs: { id: \"app\" } },\n    [\n      _c(\"div\", { attrs: { id: \"mobile-bar\" } }, [\n        _c(\"img\", {\n          staticClass: \"menu-button\",\n          attrs: { src: require(\"./assets/logo.png\"), alt: \"\" }\n        }),\n        _c(\"div\", { staticClass: \"logo\" }, [\n          _c(\"a\", { attrs: { href: \"/\" } }, [_vm._v(\"Orion-Stress-Tester\")])\n        ])\n      ]),\n      _c(\"el-header\", { attrs: { id: \"pc-bar\" } }, [\n        _c(\"a\", { attrs: { id: \"logo\", href: \"/\" } }, [\n          _c(\"img\", { attrs: { src: require(\"./assets/logo.png\"), alt: \"\" } }),\n          _c(\"span\", [_vm._v(\"Orion-Stress-Tester\")])\n        ])\n      ]),\n      _c(\n        \"el-container\",\n        [\n          _c(\n            \"el-main\",\n            { attrs: { id: \"main\" } },\n            [\n              _c(\n                \"el-form\",\n                {\n                  ref: \"requestTable\",\n                  attrs: {\n                    model: _vm.requestData,\n                    \"label-width\": \"120px\",\n                    \"label-position\": \"right\"\n                  }\n                },\n                [\n                  _c(\n                    \"el-form-item\",\n                    { attrs: { label: _vm.$t(\"requestType\") } },\n                    [\n                      _c(\n                        \"el-radio-group\",\n                        {\n                          attrs: { placeholder: _vm.$t(\"select\") },\n                          model: {\n                            value: _vm.requestData.requestType,\n                            callback: function($$v) {\n                              _vm.$set(_vm.requestData, \"requestType\", $$v)\n                            },\n                            expression: \"requestData.requestType\"\n                          }\n                        },\n                        [\n                          _c(\"el-radio\", { attrs: { label: \"HTTP\" } }, [\n                            _vm._v(\"HTTP/S\")\n                          ]),\n                          _c(\"el-radio\", { attrs: { label: \"WebSocket\" } }, [\n                            _vm._v(\"WebSocket/S\")\n                          ]),\n                          _c(\"el-radio\", { attrs: { label: \"TCP\" } }, [\n                            _vm._v(\"TCP/S\")\n                          ])\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  ),\n                  _vm.requestData.requestType == \"HTTP\"\n                    ? _c(\n                        \"el-form-item\",\n                        {\n                          attrs: {\n                            label: _vm.$t(\"requestUrl\"),\n                            prop: \"url\",\n                            rules: [\n                              {\n                                required: true,\n                                message: _vm.$t(\"requestTips\")\n                              },\n                              {\n                                pattern: /^(http|https):\\/\\/.+$/,\n                                message: _vm.$t(\"httpUrlInvalidTips\")\n                              }\n                            ],\n                            required: \"\"\n                          }\n                        },\n                        [\n                          _c(\n                            \"el-input\",\n                            {\n                              attrs: {\n                                placeholder: _vm.$t(\"httpUrlPlaceholder\")\n                              },\n                              model: {\n                                value: _vm.requestData.url,\n                                callback: function($$v) {\n                                  _vm.$set(_vm.requestData, \"url\", $$v)\n                                },\n                                expression: \"requestData.url\"\n                              }\n                            },\n                            [\n                              _c(\n                                \"el-select\",\n                                {\n                                  staticStyle: { width: \"6rem\", color: \"#222\" },\n                                  attrs: {\n                                    slot: \"prepend\",\n                                    placeholder: \"请选择\"\n                                  },\n                                  slot: \"prepend\",\n                                  model: {\n                                    value: _vm.requestData.method,\n                                    callback: function($$v) {\n                                      _vm.$set(_vm.requestData, \"method\", $$v)\n                                    },\n                                    expression: \"requestData.method\"\n                                  }\n                                },\n                                [\n                                  _c(\"el-option\", { attrs: { value: \"GET\" } }, [\n                                    _vm._v(\"GET\")\n                                  ]),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"POST\" } },\n                                    [_vm._v(\"POST\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"OPTIONS\" } },\n                                    [_vm._v(\"OPTIONS\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"HEAD\" } },\n                                    [_vm._v(\"HEAD\")]\n                                  ),\n                                  _c(\"el-option\", { attrs: { value: \"PUT\" } }, [\n                                    _vm._v(\"PUT\")\n                                  ]),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"DELETE\" } },\n                                    [_vm._v(\"DELETE\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"TRACE\" } },\n                                    [_vm._v(\"TRACE\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"CONNECT\" } },\n                                    [_vm._v(\"CONNECT\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"PATCH\" } },\n                                    [_vm._v(\"PATCH\")]\n                                  ),\n                                  _c(\n                                    \"el-option\",\n                                    { attrs: { value: \"OTHER\" } },\n                                    [_vm._v(\"OTHER\")]\n                                  )\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"WebSocket\"\n                    ? _c(\n                        \"el-form-item\",\n                        {\n                          attrs: {\n                            label: _vm.$t(\"requestUrl\"),\n                            prop: \"url\",\n                            rules: [\n                              {\n                                required: true,\n                                message: _vm.$t(\"requestTips\")\n                              },\n                              {\n                                pattern: /^(ws|wss):\\/\\/.+$/,\n                                message: _vm.$t(\"websocketUrlInvalidTips\")\n                              }\n                            ],\n                            required: \"\"\n                          }\n                        },\n                        [\n                          _c(\"el-input\", {\n                            attrs: {\n                              placeholder: _vm.$t(\"websocketUrlPlaceholder\")\n                            },\n                            model: {\n                              value: _vm.requestData.url,\n                              callback: function($$v) {\n                                _vm.$set(_vm.requestData, \"url\", $$v)\n                              },\n                              expression: \"requestData.url\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"TCP\"\n                    ? _c(\n                        \"el-form-item\",\n                        {\n                          attrs: { label: _vm.$t(\"requestUrl\"), required: \"\" }\n                        },\n                        [\n                          _c(\n                            \"el-col\",\n                            { attrs: { xs: 24, sm: 2 } },\n                            [\n                              _c(\n                                \"el-form-item\",\n                                [\n                                  _c(\n                                    \"el-checkbox\",\n                                    {\n                                      model: {\n                                        value: _vm.requestData.isSSL,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.requestData,\n                                            \"isSSL\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"requestData.isSSL\"\n                                      }\n                                    },\n                                    [_vm._v(\"SSL\")]\n                                  )\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          ),\n                          _c(\n                            \"el-col\",\n                            { attrs: { xs: 24, sm: 14 } },\n                            [\n                              _c(\n                                \"el-form-item\",\n                                {\n                                  attrs: {\n                                    prop: \"host\",\n                                    rules: [\n                                      {\n                                        required: true,\n                                        message: _vm.$t(\"tcpHostTips\")\n                                      }\n                                    ]\n                                  }\n                                },\n                                [\n                                  _c(\"el-input\", {\n                                    attrs: {\n                                      placeholder: _vm.$t(\"tcpHostPlaceholder\")\n                                    },\n                                    model: {\n                                      value: _vm.requestData.host,\n                                      callback: function($$v) {\n                                        _vm.$set(_vm.requestData, \"host\", $$v)\n                                      },\n                                      expression: \"requestData.host\"\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          ),\n                          _c(\"el-col\", { attrs: { xs: 0, sm: 1 } }, [\n                            _vm._v(\" \")\n                          ]),\n                          _c(\n                            \"el-col\",\n                            { attrs: { xs: 24, sm: 7 } },\n                            [\n                              _c(\n                                \"el-form-item\",\n                                [\n                                  _c(\"el-input\", {\n                                    attrs: {\n                                      type: \"number\",\n                                      min: \"0\",\n                                      max: \"65535\",\n                                      placeholder: _vm.$t(\"tcpPortPlaceholder\")\n                                    },\n                                    model: {\n                                      value: _vm.requestData.port,\n                                      callback: function($$v) {\n                                        _vm.$set(_vm.requestData, \"port\", $$v)\n                                      },\n                                      expression: \"requestData.port\"\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.isSSL\n                    ? _c(\n                        \"el-form-item\",\n                        { attrs: { label: _vm.$t(\"certSetting\") } },\n                        [\n                          _c(\n                            \"el-col\",\n                            { attrs: { span: 24 } },\n                            [\n                              _c(\n                                \"el-radio-group\",\n                                {\n                                  model: {\n                                    value: _vm.requestData.cert,\n                                    callback: function($$v) {\n                                      _vm.$set(_vm.requestData, \"cert\", $$v)\n                                    },\n                                    expression: \"requestData.cert\"\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"el-radio\",\n                                    { attrs: { label: \"DEFAULT\" } },\n                                    [_vm._v(_vm._s(_vm.$t(\"certDefault\")))]\n                                  ),\n                                  _c(\"el-radio\", { attrs: { label: \"PEM\" } }, [\n                                    _vm._v(_vm._s(_vm.$t(\"certPem\")))\n                                  ]),\n                                  _c(\"el-radio\", { attrs: { label: \"PFX\" } }, [\n                                    _vm._v(_vm._s(_vm.$t(\"certPfx\")))\n                                  ]),\n                                  _c(\"el-radio\", { attrs: { label: \"JKS\" } }, [\n                                    _vm._v(_vm._s(_vm.$t(\"certJks\")))\n                                  ])\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          ),\n                          _vm.requestData.cert == \"PEM\" ||\n                          _vm.requestData.cert == \"PFX\" ||\n                          _vm.requestData.cert == \"JKS\"\n                            ? _c(\n                                \"el-col\",\n                                { attrs: { span: 24 } },\n                                [\n                                  _c(\"el-input\", {\n                                    attrs: {\n                                      type: \"textarea\",\n                                      placeholder: _vm.$t(\"certKey\")\n                                    },\n                                    model: {\n                                      value: _vm.requestData.certKey,\n                                      callback: function($$v) {\n                                        _vm.$set(\n                                          _vm.requestData,\n                                          \"certKey\",\n                                          $$v\n                                        )\n                                      },\n                                      expression: \"requestData.certKey\"\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _vm.requestData.cert == \"PEM\" ||\n                          _vm.requestData.cert == \"PFX\" ||\n                          _vm.requestData.cert == \"JKS\"\n                            ? _c(\n                                \"el-col\",\n                                { attrs: { span: 24 } },\n                                [\n                                  _c(\"el-input\", {\n                                    attrs: {\n                                      type: \"textarea\",\n                                      placeholder: _vm.$t(\"certValue\")\n                                    },\n                                    model: {\n                                      value: _vm.requestData.certValue,\n                                      callback: function($$v) {\n                                        _vm.$set(\n                                          _vm.requestData,\n                                          \"certValue\",\n                                          $$v\n                                        )\n                                      },\n                                      expression: \"requestData.certValue\"\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _vm.requestData.cert == \"PEM\" ||\n                          _vm.requestData.cert == \"PFX\" ||\n                          _vm.requestData.cert == \"JKS\"\n                            ? _c(\n                                \"el-col\",\n                                [\n                                  _c(\n                                    \"el-button\",\n                                    {\n                                      staticStyle: { \"margin-right\": \"5px\" },\n                                      attrs: { type: \"primary\", size: \"small\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.$refs.readCertKey.click()\n                                        }\n                                      }\n                                    },\n                                    [_vm._v(_vm._s(_vm.$t(\"btnReadCertKey\")))]\n                                  ),\n                                  _c(\"input\", {\n                                    ref: \"readCertKey\",\n                                    staticStyle: { display: \"none\" },\n                                    attrs: {\n                                      type: \"file\",\n                                      accept: \".pem,.key,.p12,.jks,.txt\"\n                                    },\n                                    on: { change: _vm.loadCertKey }\n                                  }),\n                                  _c(\n                                    \"el-button\",\n                                    {\n                                      attrs: { type: \"primary\", size: \"small\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.$refs.readCertValue.click()\n                                        }\n                                      }\n                                    },\n                                    [_vm._v(_vm._s(_vm.$t(\"btnReadCertValue\")))]\n                                  ),\n                                  _c(\"input\", {\n                                    ref: \"readCertValue\",\n                                    staticStyle: { display: \"none\" },\n                                    attrs: {\n                                      type: \"file\",\n                                      accept: \".pem,.key,.p12,.jks,.txt\"\n                                    },\n                                    on: { change: _vm.loadCertValue }\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e()\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"WebSocket\"\n                    ? _c(\n                        \"el-form-item\",\n                        { attrs: { label: \"WebSocketVersion\" } },\n                        [\n                          _c(\n                            \"el-select\",\n                            {\n                              staticStyle: { width: \"100%\" },\n                              attrs: { placeholder: \"请选择\" },\n                              model: {\n                                value: _vm.requestData.webSocketVersion,\n                                callback: function($$v) {\n                                  _vm.$set(\n                                    _vm.requestData,\n                                    \"webSocketVersion\",\n                                    $$v\n                                  )\n                                },\n                                expression: \"requestData.webSocketVersion\"\n                              }\n                            },\n                            [\n                              _c(\"el-option\", { attrs: { value: \"V00\" } }, [\n                                _vm._v(\"V00\")\n                              ]),\n                              _c(\"el-option\", { attrs: { value: \"V07\" } }, [\n                                _vm._v(\"V07\")\n                              ]),\n                              _c(\"el-option\", { attrs: { value: \"V08\" } }, [\n                                _vm._v(\"V08\")\n                              ]),\n                              _c(\"el-option\", { attrs: { value: \"V13\" } }, [\n                                _vm._v(\"V13\")\n                              ])\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"WebSocket\"\n                    ? _c(\n                        \"el-form-item\",\n                        { attrs: { label: \"SubProtocols\" } },\n                        [\n                          _c(\n                            \"el-col\",\n                            { attrs: { span: 24 } },\n                            _vm._l(_vm.requestData.subProtocols, function(\n                              item,\n                              index\n                            ) {\n                              return _c(\n                                \"el-form-item\",\n                                { key: item.key },\n                                [\n                                  _c(\n                                    \"el-col\",\n                                    { attrs: { xs: 20, sm: 21 } },\n                                    [\n                                      _c(\"el-input\", {\n                                        attrs: {\n                                          placeholder: _vm.$t(\"inputValue\")\n                                        },\n                                        model: {\n                                          value: item.value,\n                                          callback: function($$v) {\n                                            _vm.$set(item, \"value\", $$v)\n                                          },\n                                          expression: \"item.value\"\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _c(\"el-col\", { attrs: { xs: 1, sm: 1 } }, [\n                                    _vm._v(\" \")\n                                  ]),\n                                  _c(\n                                    \"el-col\",\n                                    { attrs: { xs: 3, sm: 2 } },\n                                    [\n                                      _c(\n                                        \"el-button\",\n                                        {\n                                          attrs: {\n                                            size: \"small\",\n                                            type: \"danger\"\n                                          },\n                                          on: {\n                                            click: function($event) {\n                                              $event.preventDefault()\n                                              return _vm.removeSubProtocols(\n                                                item\n                                              )\n                                            }\n                                          }\n                                        },\n                                        [_vm._v(_vm._s(_vm.$t(\"btnRemove\")))]\n                                      )\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              )\n                            }),\n                            1\n                          ),\n                          _c(\n                            \"el-col\",\n                            { attrs: { span: 24 } },\n                            [\n                              _c(\n                                \"el-button\",\n                                {\n                                  attrs: { type: \"primary\", size: \"small\" },\n                                  on: { click: _vm.addSubProtocols }\n                                },\n                                [_vm._v(_vm._s(_vm.$t(\"btnAdd\")))]\n                              )\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"HTTP\" ||\n                  _vm.requestData.requestType == \"WebSocket\"\n                    ? _c(\n                        \"el-form-item\",\n                        { attrs: { label: _vm.$t(\"requestHeaders\") } },\n                        [\n                          _c(\n                            \"el-col\",\n                            { attrs: { span: 24 } },\n                            _vm._l(_vm.requestData.headers, function(\n                              item,\n                              index\n                            ) {\n                              return _c(\n                                \"el-form-item\",\n                                { key: index },\n                                [\n                                  _c(\n                                    \"el-col\",\n                                    { attrs: { xs: 24, sm: 10 } },\n                                    [\n                                      _c(\"el-input\", {\n                                        attrs: {\n                                          placeholder: _vm.$t(\"inputName\")\n                                        },\n                                        model: {\n                                          value: item.key,\n                                          callback: function($$v) {\n                                            _vm.$set(item, \"key\", $$v)\n                                          },\n                                          expression: \"item.key\"\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _c(\"el-col\", { attrs: { xs: 0, sm: 1 } }, [\n                                    _vm._v(\" \")\n                                  ]),\n                                  _c(\n                                    \"el-col\",\n                                    { attrs: { xs: 20, sm: 10 } },\n                                    [\n                                      _c(\"el-input\", {\n                                        attrs: {\n                                          placeholder: _vm.$t(\"inputValue\")\n                                        },\n                                        model: {\n                                          value: item.value,\n                                          callback: function($$v) {\n                                            _vm.$set(item, \"value\", $$v)\n                                          },\n                                          expression: \"item.value\"\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _c(\"el-col\", { attrs: { xs: 1, sm: 1 } }, [\n                                    _vm._v(\" \")\n                                  ]),\n                                  _c(\n                                    \"el-col\",\n                                    { attrs: { xs: 3, sm: 2 } },\n                                    [\n                                      _c(\n                                        \"el-button\",\n                                        {\n                                          attrs: {\n                                            size: \"small\",\n                                            type: \"danger\"\n                                          },\n                                          on: {\n                                            click: function($event) {\n                                              $event.preventDefault()\n                                              return _vm.removeHeader(item)\n                                            }\n                                          }\n                                        },\n                                        [_vm._v(_vm._s(_vm.$t(\"btnRemove\")))]\n                                      )\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              )\n                            }),\n                            1\n                          ),\n                          _c(\n                            \"el-col\",\n                            { attrs: { span: 24 } },\n                            [\n                              _c(\n                                \"el-button\",\n                                {\n                                  attrs: { type: \"primary\", size: \"small\" },\n                                  on: { click: _vm.addHeader }\n                                },\n                                [_vm._v(_vm._s(_vm.$t(\"btnAdd\")))]\n                              )\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _vm.requestData.requestType == \"TCP\"\n                    ? _c(\n                        \"el-form-item\",\n                        { attrs: { label: \"ServerName(SNI)\" } },\n                        [\n                          _c(\"el-input\", {\n                            attrs: {\n                              placeholder: _vm.$t(\n                                \"requestServerNamePlaceholder\"\n                              )\n                            },\n                            model: {\n                              value: _vm.requestData.serverName,\n                              callback: function($$v) {\n                                _vm.$set(_vm.requestData, \"serverName\", $$v)\n                              },\n                              expression: \"requestData.serverName\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  _c(\n                    \"el-form-item\",\n                    { attrs: { label: _vm.$t(\"requestBody\") } },\n                    [\n                      _c(\"el-input\", {\n                        attrs: {\n                          type: \"textarea\",\n                          placeholder: _vm.$t(\"requestBodyPlaceholder\")\n                        },\n                        model: {\n                          value: _vm.requestData.body,\n                          callback: function($$v) {\n                            _vm.$set(_vm.requestData, \"body\", $$v)\n                          },\n                          expression: \"requestData.body\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"el-form-item\",\n                    { attrs: { label: _vm.$t(\"requestCount\"), required: \"\" } },\n                    [\n                      _c(\n                        \"el-col\",\n                        { attrs: { xs: 24, sm: 6 } },\n                        [\n                          _c(\n                            \"el-form-item\",\n                            {\n                              attrs: {\n                                prop: \"count\",\n                                rules: [\n                                  {\n                                    required: true,\n                                    type: \"number\",\n                                    min: 0,\n                                    message: _vm.$t(\"requestCountTips\")\n                                  }\n                                ],\n                                required: \"\"\n                              }\n                            },\n                            [\n                              _c(\"el-input\", {\n                                attrs: {\n                                  placeholder:\n                                    _vm.requestData.requestType == \"HTTP\"\n                                      ? _vm.$t(\"requestCountPlaceholder\")\n                                      : _vm.$t(\"requestTcpCountPlaceholder\")\n                                },\n                                model: {\n                                  value: _vm.requestData.count,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.requestData,\n                                      \"count\",\n                                      _vm._n($$v)\n                                    )\n                                  },\n                                  expression: \"requestData.count\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      ),\n                      _c(\"el-col\", { attrs: { sm: 1 } }, [_vm._v(\" \")]),\n                      _c(\n                        \"el-col\",\n                        { attrs: { xs: 24, sm: 8 } },\n                        [\n                          _c(\n                            \"el-form-item\",\n                            {\n                              attrs: {\n                                prop: \"average\",\n                                rules: [\n                                  {\n                                    required: true,\n                                    type: \"number\",\n                                    min: 0,\n                                    message: _vm.$t(\"requestAverageTips\")\n                                  }\n                                ],\n                                required: \"\"\n                              }\n                            },\n                            [\n                              _c(\"el-input\", {\n                                attrs: {\n                                  placeholder:\n                                    _vm.requestData.requestType == \"HTTP\"\n                                      ? _vm.$t(\"requestAveragePlaceholder\")\n                                      : _vm.$t(\"requestTcpAveragePlaceholder\")\n                                },\n                                model: {\n                                  value: _vm.requestData.average,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.requestData,\n                                      \"average\",\n                                      _vm._n($$v)\n                                    )\n                                  },\n                                  expression: \"requestData.average\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      ),\n                      _c(\"el-col\", { attrs: { sm: 1 } }, [_vm._v(\" \")]),\n                      _c(\n                        \"el-col\",\n                        { attrs: { xs: 24, sm: 8 } },\n                        [\n                          _c(\n                            \"el-form-item\",\n                            {\n                              attrs: {\n                                prop: \"interval\",\n                                rules: [\n                                  {\n                                    required: true,\n                                    type: \"number\",\n                                    min: 1,\n                                    message: _vm.$t(\"requestIntervalTips\")\n                                  }\n                                ],\n                                required: \"\"\n                              }\n                            },\n                            [\n                              _c(\"el-input\", {\n                                attrs: {\n                                  placeholder:\n                                    _vm.requestData.requestType == \"HTTP\"\n                                      ? _vm.$t(\"requestIntervalPlaceholder\")\n                                      : _vm.$t(\"requestTcpIntervalPlaceholder\")\n                                },\n                                model: {\n                                  value: _vm.requestData.interval,\n                                  callback: function($$v) {\n                                    _vm.$set(\n                                      _vm.requestData,\n                                      \"interval\",\n                                      _vm._n($$v)\n                                    )\n                                  },\n                                  expression: \"requestData.interval\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"el-form-item\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.isStatistics,\n                          expression: \"isStatistics\"\n                        }\n                      ]\n                    },\n                    [_vm._v(_vm._s(_vm.statisticsInfo))]\n                  ),\n                  _c(\"el-form-item\", [\n                    _c(\n                      \"div\",\n                      { staticStyle: { display: \"flex\", \"flex-wrap\": \"wrap\" } },\n                      [\n                        _c(\n                          \"div\",\n                          { staticStyle: { \"margin-right\": \"0.6rem\" } },\n                          [\n                            _c(\n                              \"el-tooltip\",\n                              {\n                                staticClass: \"item\",\n                                attrs: {\n                                  effect: \"dark\",\n                                  content: _vm.$t(\"requestConfigPrintInfoTips\"),\n                                  placement: \"top\"\n                                }\n                              },\n                              [\n                                _c(\"el-checkbox\", {\n                                  attrs: {\n                                    label: _vm.$t(\"requestConfigPrintInfo\")\n                                  },\n                                  model: {\n                                    value: _vm.requestConfig.printResInfo,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.requestConfig,\n                                        \"printResInfo\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"requestConfig.printResInfo\"\n                                  }\n                                })\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        ),\n                        _c(\n                          \"div\",\n                          { staticStyle: { \"margin-right\": \"0.6rem\" } },\n                          [\n                            _c(\"el-input\", {\n                              attrs: {\n                                placeholder: _vm.$t(\"requestConfigTimeout\"),\n                                type: \"number\"\n                              },\n                              model: {\n                                value: _vm.requestConfig.timeout,\n                                callback: function($$v) {\n                                  _vm.$set(\n                                    _vm.requestConfig,\n                                    \"timeout\",\n                                    _vm._n($$v)\n                                  )\n                                },\n                                expression: \"requestConfig.timeout\"\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _c(\n                          \"div\",\n                          { staticStyle: { \"margin-right\": \"0.6rem\" } },\n                          [\n                            _c(\"el-checkbox\", {\n                              attrs: {\n                                label: _vm.$t(\"requestConfigKeepAlive\")\n                              },\n                              model: {\n                                value: _vm.requestConfig.keepAlive,\n                                callback: function($$v) {\n                                  _vm.$set(_vm.requestConfig, \"keepAlive\", $$v)\n                                },\n                                expression: \"requestConfig.keepAlive\"\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _c(\n                          \"div\",\n                          {\n                            directives: [\n                              {\n                                name: \"show\",\n                                rawName: \"v-show\",\n                                value: _vm.requestConfig.keepAlive,\n                                expression: \"requestConfig.keepAlive\"\n                              }\n                            ],\n                            staticStyle: { flex: \"1\" }\n                          },\n                          [\n                            _c(\"el-input\", {\n                              attrs: {\n                                placeholder: _vm.$t(\"requestConfigPoolSize\"),\n                                type: \"number\"\n                              },\n                              model: {\n                                value: _vm.requestConfig.poolSize,\n                                callback: function($$v) {\n                                  _vm.$set(\n                                    _vm.requestConfig,\n                                    \"poolSize\",\n                                    _vm._n($$v)\n                                  )\n                                },\n                                expression: \"requestConfig.poolSize\"\n                              }\n                            })\n                          ],\n                          1\n                        )\n                      ]\n                    )\n                  ]),\n                  _c(\n                    \"el-form-item\",\n                    [\n                      _c(\n                        \"el-button\",\n                        {\n                          attrs: { type: \"primary\", loading: _vm.isExecuting },\n                          on: { click: _vm.execute }\n                        },\n                        [\n                          _vm._v(\n                            _vm._s(\n                              _vm.isExecuting\n                                ? _vm.$t(\"btnIsExecute\")\n                                : _vm.$t(\"btnExecute\")\n                            )\n                          )\n                        ]\n                      ),\n                      _c(\n                        \"el-button\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.isExecuting,\n                              expression: \"isExecuting\"\n                            }\n                          ],\n                          on: { click: _vm.executeCancel }\n                        },\n                        [_vm._v(_vm._s(_vm.$t(\"btnCancel\")))]\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.isExecuted,\n                      expression: \"isExecuted\"\n                    }\n                  ]\n                },\n                [\n                  _c(\n                    \"div\",\n                    {\n                      style: _vm.watchResponseHeaderColor,\n                      attrs: { id: \"response-heander\" }\n                    },\n                    [\n                      _c(\n                        \"div\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value:\n                                _vm.responseSucceeded != 0 ||\n                                _vm.responseFailed != 0,\n                              expression:\n                                \"responseSucceeded != 0 || responseFailed != 0\"\n                            }\n                          ],\n                          staticClass: \"response-header-box\"\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"response-header-label\" }, [\n                            _c(\"b\", [_vm._v(_vm._s(_vm.$t(\"executeProgress\")))])\n                          ]),\n                          _c(\"div\", { staticClass: \"response-header-body\" }, [\n                            _c(\n                              \"div\",\n                              {\n                                staticClass: \"sm-margin-left-0x\",\n                                staticStyle: { \"line-height\": \"34px\" }\n                              },\n                              [_vm._v(_vm._s(_vm.$t(\"succee\")) + \": \")]\n                            ),\n                            _c(\n                              \"div\",\n                              {\n                                staticStyle: {\n                                  color: \"#28a745\",\n                                  \"font-size\": \"36px\"\n                                }\n                              },\n                              [_vm._v(_vm._s(_vm.responseSucceeded))]\n                            ),\n                            _c(\"div\", { staticClass: \"small\" }, [\n                              _vm._v(_vm._s(_vm.$t(\"fail\")) + \": \")\n                            ]),\n                            _c(\n                              \"div\",\n                              {\n                                staticStyle: {\n                                  color: \"#dc3545\",\n                                  \"font-size\": \"36px\"\n                                }\n                              },\n                              [_vm._v(_vm._s(_vm.responseFailed))]\n                            ),\n                            _c(\"div\", { staticClass: \"small\" }, [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\\t\\t \" +\n                                  _vm._s(\n                                    _vm.responseSucceeded + _vm.responseFailed\n                                  ) +\n                                  \" / \" +\n                                  _vm._s(\n                                    _vm.requestData.requestType == \"HTTP\"\n                                      ? _vm.requestData.count *\n                                          _vm.requestData.average\n                                      : _vm.requestData.count\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                              )\n                            ])\n                          ])\n                        ]\n                      ),\n                      _c(\n                        \"div\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.responseTimeCount.length > 0,\n                              expression: \"responseTimeCount.length > 0\"\n                            }\n                          ],\n                          staticClass: \"response-header-box\"\n                        },\n                        [\n                          _c(\n                            \"div\",\n                            {\n                              staticClass: \"response-header-label\",\n                              staticStyle: { \"align-items\": \"flex-start\" }\n                            },\n                            [\n                              _c(\n                                \"b\",\n                                { staticStyle: { \"line-height\": \"34px\" } },\n                                [_vm._v(_vm._s(_vm.$t(\"responseTimesCount\")))]\n                              )\n                            ]\n                          ),\n                          _c(\n                            \"div\",\n                            {\n                              staticClass: \"response-header-body\",\n                              staticStyle: {\n                                \"flex-direction\": \"column\",\n                                \"align-items\": \"flex-start\"\n                              }\n                            },\n                            _vm._l(_vm.responseTimeCount, function(\n                              item,\n                              index\n                            ) {\n                              return _c(\n                                \"div\",\n                                {\n                                  key: index,\n                                  staticStyle: {\n                                    display: \"flex\",\n                                    \"flex-wrap\": \"wrap\"\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"div\",\n                                    { staticClass: \"small sm-margin-left-0x\" },\n                                    [\n                                      _vm._v(\n                                        _vm._s(_vm.$t(\"responseCode\")) +\n                                          \":\" +\n                                          _vm._s(item.code)\n                                      )\n                                    ]\n                                  ),\n                                  _c(\"div\", { staticClass: \"small\" }, [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"responseCount\")) +\n                                        \":\" +\n                                        _vm._s(item.count)\n                                    )\n                                  ]),\n                                  _c(\"div\", { staticClass: \"small\" }, [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"responseTotalTime\")) +\n                                        \":\" +\n                                        _vm._s(item.total) +\n                                        \"ms\"\n                                    )\n                                  ]),\n                                  _c(\"div\", { staticClass: \"small\" }, [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"responseMaxTime\")) +\n                                        \":\" +\n                                        _vm._s(item.max) +\n                                        \"ms\"\n                                    )\n                                  ]),\n                                  _c(\"div\", { staticClass: \"small\" }, [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"responseMeanTime\")) +\n                                        \":\" +\n                                        _vm._s(item.mean) +\n                                        \"ms\"\n                                    )\n                                  ])\n                                ]\n                              )\n                            }),\n                            0\n                          )\n                        ]\n                      ),\n                      _c(\n                        \"div\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value:\n                                _vm.requestDataLen != 0 ||\n                                _vm.responseDataLen != 0,\n                              expression:\n                                \"requestDataLen != 0 || responseDataLen != 0\"\n                            }\n                          ],\n                          staticClass: \"response-header-box\"\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"response-header-label\" }, [\n                            _c(\"b\", [_vm._v(_vm._s(_vm.$t(\"dataLenInfo\")))])\n                          ]),\n                          _c(\"div\", { staticClass: \"response-header-body\" }, [\n                            _c(\n                              \"div\",\n                              {\n                                staticStyle: {\n                                  display: \"flex\",\n                                  \"flex-wrap\": \"wrap\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"div\",\n                                  { staticClass: \"small sm-margin-left-0x\" },\n                                  [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"requestDataLen\")) +\n                                        \":\" +\n                                        _vm._s(_vm.requestDataLen) +\n                                        \" byte\"\n                                    )\n                                  ]\n                                ),\n                                _c(\"div\", { staticClass: \"small\" }, [\n                                  _vm._v(\n                                    _vm._s(_vm.$t(\"responseDataLen\")) +\n                                      \":\" +\n                                      _vm._s(_vm.responseDataLen) +\n                                      \" byte\"\n                                  )\n                                ])\n                              ]\n                            )\n                          ])\n                        ]\n                      ),\n                      _c(\n                        \"div\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value:\n                                _vm.serverMetrics != null &&\n                                _vm.serverMetrics.processors != 0,\n                              expression:\n                                \"serverMetrics != null && serverMetrics.processors != 0\"\n                            }\n                          ],\n                          staticClass: \"response-header-box\"\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"response-header-label\" }, [\n                            _c(\"b\", [_vm._v(_vm._s(_vm.$t(\"serverMemory\")))])\n                          ]),\n                          _c(\"div\", { staticClass: \"response-header-body\" }, [\n                            _c(\n                              \"div\",\n                              {\n                                staticStyle: {\n                                  display: \"flex\",\n                                  \"flex-wrap\": \"wrap\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"div\",\n                                  { staticClass: \"small sm-margin-left-0x\" },\n                                  [\n                                    _vm._v(\n                                      _vm._s(_vm.$t(\"serverProcessors\")) +\n                                        \":\" +\n                                        _vm._s(_vm.serverMetrics.processors)\n                                    )\n                                  ]\n                                ),\n                                _c(\"div\", { staticClass: \"small\" }, [\n                                  _vm._v(\n                                    _vm._s(_vm.$t(\"serverMaxMemory\")) +\n                                      \":\" +\n                                      _vm._s(_vm.serverMetrics.maxMemory) +\n                                      \" m\"\n                                  )\n                                ]),\n                                _c(\"div\", { staticClass: \"small\" }, [\n                                  _vm._v(\n                                    _vm._s(_vm.$t(\"serverTotalMemory\")) +\n                                      \":\" +\n                                      _vm._s(_vm.serverMetrics.totalMemory) +\n                                      \" m\"\n                                  )\n                                ]),\n                                _c(\"div\", { staticClass: \"small\" }, [\n                                  _vm._v(\n                                    _vm._s(_vm.$t(\"serverFreeMemory\")) +\n                                      \":\" +\n                                      _vm._s(_vm.serverMetrics.freeMemory) +\n                                      \" m\"\n                                  )\n                                ])\n                              ]\n                            )\n                          ])\n                        ]\n                      )\n                    ]\n                  ),\n                  _c(\"div\", {\n                    ref: \"responseConsoleBody\",\n                    attrs: { id: \"response-body\" }\n                  })\n                ]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}