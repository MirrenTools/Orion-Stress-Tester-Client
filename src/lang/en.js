export default {
	requestType: 'Request type',
	select: 'Choose',
	requestUrl: 'Request URL',
	requestTips: 'Request  cannot be empty',
	httpUrlPlaceholder: "Request URL,for example http://127.0.0.1/test?id=1",
	httpUrlInvalidTips: 'Invalid request URL, must be start with http:// or https:// ',
	websocketUrlPlaceholder: "Request URL,for example ws://127.0.0.1/test?id=1",
	websocketUrlInvalidTips: 'Invalid request URL, must be start with ws:// or wss://',
	tcpHostTips: "Request host cannot be empty",
	tcpHostPlaceholder: "Request host,for example test.com æˆ– 127.0.0.1",
	tcpPortPlaceholder: "Request port,default(80/443)",
	certSetting: 'Certificate',
	certDefault: 'Use default',
	certPfx: 'Use PFX',
	certPem: 'Use PEM',
	certJks: 'Use JKS',
	certKey: 'Please enter certificate key or password',
	certValue: 'Please enter certificatevalue',
	btnReadCertKey:'Load key',
	btnReadCertValue:'Load value',
	requestServerNamePlaceholder: 'Please enter the Server name',
	requestHeaders: 'headers',
	inputKey: 'Please enter key',
	inputName: 'Please enter name',
	inputValue: 'Please enter value',
	requestBody: 'Body data',
	requestBodyPlaceholder: 'Please enter the body content to be sent',
	requestCount: 'Request settings',
	requestCountPlaceholder: 'Total requests',
	requestTcpCountPlaceholder: 'Total connections',
	requestCountTips: 'Must be greater than 0',
	requestAveragePlaceholder: 'Requests times',
	requestTcpAveragePlaceholder: 'Body sent times',
	requestAverageTips: 'Must be greater than 0',
	requestIntervalPlaceholder: 'Time interval per request (MS)',
	requestTcpIntervalPlaceholder: 'Time interval to send(MS)',
	requestIntervalTips: 'Interval must be greater than 1 ms',
	statisticsInfo: 'Request {average} times every {interval} ms, {count} times in total, max connection {conn} , cumulative request {sum} times',
	statisticsWsTcpInfo: 'Open {count} connections, send requests {average} times per connection, Every request is {interval} ms apart, cumulative request {sum} times',
	requestConfigPrintInfo: 'Print response log',
	requestConfigPrintInfoTips: 'A large number of request printing response logs, very test the performance of the browser,may cause browser to stopped working, please choose carefully!',
	requestConfigTimeout: 'Timeout(ms)',
	requestConfigKeepAlive: 'Keep alive',
	requestConfigPoolSize: 'Max  connections, default is Total requests',
	btnExecute: 'Execute',
	btnIsExecute: 'Executing...',
	btnCancel: 'Cancel',
	btnAdd: 'Add',
	btnRemove: 'Remove',
	succee: 'succee',
	fail: 'fail',
	executeProgress: 'Progress',
	responseFailedCount: 'Failures',
	responseTimesCount: 'Statistics',
	responseCode: 'Status code',
	responseCount: 'Times',
	responseTotalTime: 'Total time',
	responseMaxTime: 'Max time',
	responseMeanTime: 'Mean time',
	dataLenInfo: 'Bytes statistics',
	requestDataLen: 'Request data length',
	responseDataLen: 'Response data length',
	serverMemory: 'Console performance',
	serverProcessors: 'Processors',
	serverMaxMemory: 'Max memory',
	serverTotalMemory: 'Total memory',
	serverFreeMemory: 'Free memory',
	consoleConnecting: 'Connecting to console...',
	consoleConnected: 'Successfully connected to console!',
	consoleConnectFailed: 'Failed to connect to the console. Please check the browser console for more information!',
	consoleClosed: 'Console closed!',
	commandTestSubmitted: 'Batch request {count} submitted, executing...',
	commandTestResponseCount: 'Request {count}',
	commandTestResponseIndex: 'The {index} time',
	commandTestResponseState: 'state:{state}',
	commandTestResponseCode: 'Status code:{code}',
	commandTestResponseConnTime: 'Connection time:{connTime} ms',
	commandTestResponseEndTime: 'Response time:{endTime} ms',
	commandTestResponseBody: 'Response:{body}',
	commandInvalidParameter: 'Invalid request parameter or missing required parameter, console response information:',
	commandGcOverheadLimit: 'Console stopped working over GC overhead,please restart the software and increase the JVM memory!',
	commandBeforeRequestTestSucceeded: 'Pre test for request succeeded, test in progress...',
	commandBeforeRequestTestFailed: 'Pre test  request failed: please check if your service is available, console response information:',
	commandTestComplete: 'Test completed!',
}
